{"version":3,"file":"useApiForm-CMhkpNNG.js","sources":["../../src/hooks/useApplications.tsx","../../src/utils/apiContentUtils.ts","../../src/hooks/useApplicationApis.tsx","../../src/hooks/application-apis/useApiForm.tsx"],"sourcesContent":["\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from './useAuth';\nimport { useToast } from '@/components/ui/use-toast';\nimport type { Application } from '@/types/application';\n\nexport function useApplications() {\n  const { session } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const isAuthenticated = !!session.user;\n\n  // Fetch all applications\n  const { data: applications, isLoading, error } = useQuery({\n    queryKey: ['applications'],\n    queryFn: async () => {\n      const query = supabase\n        .from('applications')\n        .select('*')\n        .order('created_at', { ascending: false });\n      \n      const { data, error } = await query;\n      \n      if (error) throw error;\n      return data as Application[];\n    },\n  });\n\n  // Create a new application\n  const createApplication = useMutation({\n    mutationFn: async (applicationData: Partial<Application>) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { data, error } = await supabase\n        .from('applications')\n        .insert({\n          name: applicationData.name,\n          description: applicationData.description,\n          category: applicationData.category,\n          status: applicationData.status || 'Development',\n          organization_id: applicationData.organization_id,\n          user_id: session.user.id,\n          tags: applicationData.tags || [],\n        })\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['applications'] });\n      toast({\n        title: 'Application created',\n        description: 'Your new application has been created successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating application',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update an application\n  const updateApplication = useMutation({\n    mutationFn: async ({ id, ...data }: Partial<Application> & { id: string }) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { data: updatedApp, error } = await supabase\n        .from('applications')\n        .update({\n          name: data.name,\n          description: data.description,\n          category: data.category,\n          status: data.status,\n          tags: data.tags,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', id)\n        .eq('user_id', session.user.id)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return updatedApp;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['applications'] });\n      toast({\n        title: 'Application updated',\n        description: 'The application has been updated successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating application',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete an application\n  const deleteApplication = useMutation({\n    mutationFn: async (id: string) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { error } = await supabase\n        .from('applications')\n        .delete()\n        .eq('id', id)\n        .eq('user_id', session.user.id);\n      \n      if (error) throw error;\n      return id;\n    },\n    onSuccess: (id) => {\n      queryClient.invalidateQueries({ queryKey: ['applications'] });\n      toast({\n        title: 'Application deleted',\n        description: 'The application has been deleted successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error deleting application',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Toggle favorite status\n  const toggleFavorite = useMutation({\n    mutationFn: async ({ id, favorite }: { id: string; favorite: boolean }) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { data, error } = await supabase\n        .from('applications')\n        .update({ favorite })\n        .eq('id', id)\n        .eq('user_id', session.user.id)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['applications'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating favorite status',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  return {\n    applications,\n    isLoading,\n    error,\n    isAuthenticated,\n    createApplication,\n    updateApplication,\n    deleteApplication,\n    toggleFavorite,\n  };\n}\n\n// Get a single application by ID\nexport function useApplication(id?: string) {\n  const { session } = useAuth();\n  \n  return useQuery({\n    queryKey: ['application', id],\n    queryFn: async () => {\n      if (!id) return null;\n      \n      const { data, error } = await supabase\n        .from('applications')\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (error) throw error;\n      return data as Application;\n    },\n    enabled: !!id,\n  });\n}\n","\n/**\n * Fetches API content from a URI and attempts to determine the format\n * @param uri The URI to fetch the content from\n * @returns The content and format (json or yaml)\n */\nexport async function fetchContentFromUri(uri: string): Promise<{ content: string, format: 'json' | 'yaml' }> {\n  console.log('Fetching content from URI:', uri);\n  \n  try {\n    let response;\n    const headers = {\n      'Accept': 'application/json, application/yaml, text/yaml, text/plain',\n      'User-Agent': 'Agentico/0.1.0',\n    };\n    // Check if we need to use a proxy for cross-origin requests\n    const useDirectFetch = uri.startsWith(window.location.origin) || uri.startsWith('data:');\n    \n    if (useDirectFetch) {\n      // Direct fetch for same-origin or data URIs\n      response = await fetch(uri, { \n        headers,\n      });\n    } else {\n      // For cross-origin requests, you have several options:\n      // 1. Use a CORS proxy\n      const corsProxyUrl = `https://corsproxy.io/?${encodeURIComponent(uri)}`;\n      // 2. Or use your own backend proxy API if available - @note - uncomment the line below if we provide a backend proxy (in the future?)\n      // const corsProxyUrl = `/api/proxy?url=${encodeURIComponent(uri)}`;      \n      response = await fetch(corsProxyUrl, {\n        headers,\n      });\n    }\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch content: ${response.status} ${response.statusText}`);\n    }\n\n    const contentType = response.headers.get('content-type') || '';\n    const text = await response.text();\n    \n    console.log('Response content type:', contentType);\n    console.log('Response content length:', text.length);\n\n    // Determine format based on content type or content inspection\n    let format: 'json' | 'yaml' = 'json';\n    \n    if (contentType.includes('yaml') || contentType.includes('yml')) {\n      format = 'yaml';\n    } else if (!contentType.includes('json')) {\n      // If content type doesn't give us a clue, try to detect from content\n      if (text.trim().startsWith('{') || text.trim().startsWith('[')) {\n        format = 'json';\n      } else if (text.includes(':') && (text.includes('- ') || /^\\s*\\w+:\\s*\\w+/m.test(text))) {\n        format = 'yaml';\n      }\n    }\n\n    console.log('Detected format:', format);\n    \n    return { content: text, format };\n  } catch (error) {\n    console.error('Error fetching content from URI:', error);\n    throw error;\n  }\n}\n\n// Notification helpers\nexport const createResourceNotification = async (\n  supabase: any,\n  params: {\n    title: string;\n    content: string;\n    resourceType: 'project' | 'application' | 'server' | 'tool' | 'api' | 'service';\n    resourceId: string;\n    relatedResourceId?: string;\n    notificationType?: 'info' | 'success' | 'warning' | 'error';\n    organizationId?: string;\n  }\n) => {\n  try {\n    const { data: session } = await supabase.auth.getSession();\n    if (!session?.session?.user) {\n      console.warn('Cannot create notification: No authenticated user');\n      return null;\n    }\n\n    const orgId = params.organizationId || localStorage.getItem('selectedOrganizationId');\n    if (!orgId) {\n      console.warn('Cannot create notification: No organization selected');\n      return null;\n    }\n\n    const { data, error } = await supabase\n      .from('notifications')\n      .insert({\n        user_id: session.session.user.id,\n        organization_id: orgId,\n        title: params.title,\n        content: params.content,\n        resource_type: params.resourceType,\n        resource_id: params.resourceId,\n        related_resource_id: params.relatedResourceId,\n        notification_type: params.notificationType || 'info',\n        status: 'unread'\n      })\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating notification:', error);\n      return null;\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Error in createResourceNotification:', error);\n    return null;\n  }\n};\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from './useAuth';\nimport { toast } from 'sonner';\nimport type { ApplicationAPI } from '@/types/application';\nimport { fetchContentFromUri } from '@/utils/apiContentUtils';\n\nexport function useApplicationApis(applicationId?: string) {\n  const { session } = useAuth();\n  const queryClient = useQueryClient();\n\n  const isAuthenticated = !!session?.user;\n\n  // Fetch all APIs for an application\n  const { data: apis, isLoading, error } = useQuery({\n    queryKey: ['application-apis', applicationId],\n    queryFn: async () => {\n      if (!applicationId) return [];\n\n      const { data, error } = await supabase\n        .from('application_apis')\n        .select('*')\n        .eq('application_id', applicationId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data as ApplicationAPI[];\n    },\n    enabled: !!applicationId,\n  });\n\n  // Create a new API\n  const createApi = useMutation({\n    mutationFn: async (apiData: Partial<ApplicationAPI> & { fetchContent?: boolean }) => {\n      if (!session?.user) throw new Error('Authentication required');\n\n      // Extract the fetchContent flag and remove it from the data\n      const { fetchContent, ...restData } = apiData;\n      let contentToSave = restData.source_content || '';\n      let contentFormat = restData.content_format || 'json';\n\n      // If fetchContent is true and we have a source_uri, fetch the content\n      if (fetchContent && restData.source_uri) {\n        try {\n          const { content, format } = await fetchContentFromUri(restData.source_uri);\n          contentToSave = content;\n          contentFormat = format;\n        } catch (error) {\n          console.error('Failed to fetch content from URI:', error);\n          toast.error(`Failed to fetch content from URI: ${error.message}`);\n        }\n      }\n\n      const { data, error } = await supabase\n        .from('application_apis')\n        .insert({\n          name: restData.name,\n          description: restData.description,\n          application_id: restData.application_id,\n          status: restData.status || 'active',\n          version: restData.version,\n          source_uri: restData.source_uri,\n          source_content: contentToSave,\n          content_format: contentFormat,\n          tags: restData.tags || [],\n        })\n        .select();\n\n      if (error) {\n        console.error('Error creating API:', error);\n        throw error;\n      }\n\n      // Return the first item if data is an array\n      const createdApi = Array.isArray(data) ? data[0] : data;\n\n      // Return the data with decompressed content for immediate use\n      if (createdApi.source_content) {\n        try {\n          createdApi.source_content = contentToSave;\n        } catch (err) {\n          console.error('Error with returned source_content:', err);\n          createdApi.source_content = '';\n        }\n      }\n\n      return createdApi;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['application-apis', applicationId] });\n      toast.success('API created successfully');\n    },\n    onError: (error) => {\n      toast.error('Error creating API: ' + error.message);\n    },\n  });\n\n  // Update an API - fixed to properly update in Supabase\n  const updateApi = useMutation({\n    mutationFn: async ({\n      id,\n      fetchContent = false,\n      ...data\n    }: Partial<ApplicationAPI> & { id: string, fetchContent?: boolean }) => {\n      if (!session?.user) throw new Error('Authentication required');\n\n      console.log('Updating API with data:', { id, fetchContent, ...data });\n\n      // Handle source content and fetching from URI\n      let contentToSave = data.source_content;\n      let contentFormat = data.content_format || 'json';\n\n      // If fetchContent is true and we have a source_uri, fetch the content\n      if (fetchContent && data.source_uri) {\n        try {\n          const { content, format } = await fetchContentFromUri(data.source_uri);\n          contentToSave = content;\n          contentFormat = format;\n        } catch (error) {\n          console.error('Failed to fetch content from URI:', error);\n          toast.error(`Failed to fetch content from URI: ${error.message}`);\n        }\n      }\n\n      // Create update object with only fields we want to update\n      const updateData: Record<string, any> = {};\n\n      // Only include fields that are defined\n      if (data.name !== undefined) updateData.name = data.name;\n      if (data.description !== undefined) updateData.description = data.description;\n      if (data.status !== undefined) updateData.status = data.status;\n      if (data.version !== undefined) updateData.version = data.version;\n      if (data.source_uri !== undefined) updateData.source_uri = data.source_uri;\n      if (data.tags !== undefined) updateData.tags = data.tags;\n      if (data.endpoint_url !== undefined) updateData.endpoint_url = data.endpoint_url;\n      if (data.documentation_url !== undefined) updateData.documentation_url = data.documentation_url;\n      if (data.protocol !== undefined) updateData.protocol = data.protocol;\n      if (data.is_public !== undefined) updateData.is_public = data.is_public;\n      if (contentToSave) {\n        updateData.source_content = contentToSave;\n        updateData.content_format = contentFormat;\n      } else {\n        updateData.source_content = null;\n      }\n\n      // Add updated_at field\n      updateData.updated_at = new Date().toISOString();\n\n      console.log('Final update data to be sent to Supabase:', updateData);\n\n      // Use upsert instead of update to ensure the operation succeeds\n      const { error } = await supabase\n        .from('application_apis')\n        .update(updateData)\n        .eq('id', id);\n\n      if (error) {\n        console.error('Error updating API:', error);\n        throw error;\n      }\n\n      console.log('API updated successfully in Supabase');\n\n      // Return the updated data for optimistic updates\n      return { id, ...data, ...updateData };\n    },\n    onSuccess: (data) => {\n      console.log('Update successful, invalidating queries', data);\n      queryClient.invalidateQueries({ queryKey: ['application-apis', applicationId] });\n      // Also invalidate the specific API query\n      queryClient.invalidateQueries({ queryKey: ['application-api', data.id] });\n      toast.success('API updated successfully');\n    },\n    onError: (error) => {\n      console.error('Update API error:', error);\n      toast.error('Error updating API: ' + error.message);\n    },\n  });\n\n  // Delete an API\n  const deleteApi = useMutation({\n    mutationFn: async (id: string) => {\n      if (!session?.user) throw new Error('Authentication required');\n\n      const { error } = await supabase\n        .from('application_apis')\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n      return id;\n    },\n    onSuccess: (id) => {\n      queryClient.invalidateQueries({ queryKey: ['application-apis', applicationId] });\n      toast.success('API deleted successfully');\n    },\n    onError: (error) => {\n      toast.error('Error deleting API: ' + error.message);\n    },\n  });\n\n  return {\n    apis,\n    isLoading,\n    error,\n    isAuthenticated,\n    createApi,\n    updateApi,\n    deleteApi,\n  };\n}\n\n// Get a single API by ID\nexport function useApplicationApi(id?: string) {\n  const { session } = useAuth();\n\n  return useQuery({\n    queryKey: ['application-api', id],\n    queryFn: async () => {\n      if (!id) return null;\n\n      const { data, error } = await supabase\n        .from('application_apis')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) {\n        console.error('Error fetching API:', error);\n        throw error;\n      }\n\n      console.log('Fetched API data:', data);\n      return data as ApplicationAPI;\n    },\n    enabled: !!id,\n  });\n}\n","\nimport { useState, useEffect, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useNavigate } from 'react-router';\nimport { toast } from 'sonner';\nimport { fetchContentFromUri } from '@/utils/apiContentUtils';\nimport { ApplicationAPI } from '@/types/application';\nimport { useApplicationApis } from '@/hooks/useApplicationApis';\n\n// Define the schema for API form validation\nconst apiFormSchema = z.object({\n  name: z.string().min(2, {\n    message: 'API Name must be at least 2 characters.',\n  }),\n  description: z.string().optional(),\n  version: z.string().optional(),\n  status: z.enum(['active', 'inactive', 'deprecated', 'archived']).default('active'),\n  tags: z.array(z.string()).optional(),\n  source_uri: z.string().url({ message: 'Please enter a valid URL.' }).optional().or(z.string().length(0)),\n  source_content: z.string().optional(),\n  content_format: z.enum(['json', 'yaml']).optional(),\n  protocol: z.enum(['REST', 'gRPC', 'WebSockets', 'GraphQL']).optional(),\n  endpoint_url: z.string().url({ message: 'Please enter a valid URL.' }).optional().or(z.string().length(0)),\n  documentation_url: z.string().url({ message: 'Please enter a valid URL.' }).optional().or(z.string().length(0)),\n  fetchContent: z.boolean().optional(),\n});\n\n// Export the type from the schema\nexport type ApiFormValues = z.infer<typeof apiFormSchema>;\n\ninterface UseApiFormProps {\n  applicationId?: string;\n  apiId?: string;\n}\n\nexport function useApiForm({ applicationId, apiId }: UseApiFormProps) {\n  const navigate = useNavigate();\n  const isEditMode = !!apiId;\n  const [initialValues, setInitialValues] = useState<ApplicationAPI | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isContentLoading, setIsContentLoading] = useState(false);\n  const [sourceType, setSourceType] = useState<'uri' | 'content'>();\n  const [codeLanguage, setCodeLanguage] = useState<'json' | 'yaml'>('json');\n  const [shouldFetchContent, setShouldFetchContent] = useState(false);\n  \n  // Get API data from the useApplicationApis hook\n  const { \n    apis, \n    isLoading: isApiLoading, \n    error: apiError, \n    createApi, \n    updateApi \n  } = useApplicationApis(applicationId || '');\n\n  // Form setup with zod validation\n  const form = useForm<ApiFormValues>({\n    resolver: zodResolver(apiFormSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      version: '',\n      status: 'active',\n      tags: [],\n      source_uri: '',\n      source_content: '',\n      content_format: 'json',\n      protocol: 'REST',\n      endpoint_url: '',\n      documentation_url: '',\n    },\n    mode: 'onChange',\n  });\n\n  // Set initial values when API data is loaded\n  useEffect(() => {\n    console.log('APIs:', apis);\n    if (apis && isEditMode) {\n      const selectedApi = apis.find((a) => a.id === apiId);\n      if (selectedApi) {\n        setInitialValues(selectedApi);\n        \n        // Set source type based on API data\n        if (selectedApi.source_content) {\n          setSourceType('content');\n        } else if (selectedApi.source_uri) {\n          setSourceType('uri');\n        }\n        \n        // Set code language\n        if (selectedApi.content_format) {\n          setCodeLanguage(selectedApi.content_format as 'json' | 'yaml');\n        }\n      }\n    }\n    // new API creation\n    else {\n      setInitialValues(null);\n      setSourceType(undefined);\n    }\n  }, [apis, isEditMode, apiId]);\n\n  // Update form values when initial values change\n  useEffect(() => {\n    if (initialValues) {\n      form.reset({\n        name: initialValues.name || '',\n        description: initialValues.description || '',\n        version: initialValues.version || '',\n        status: initialValues.status || 'active',\n        tags: initialValues.tags || [],\n        source_uri: initialValues.source_uri || '',\n        source_content: initialValues.source_content || '',\n        content_format: initialValues.content_format as 'json' | 'yaml' || 'json',\n        protocol: initialValues.protocol as any || 'REST',\n      });\n    }\n  }, [initialValues, form]);\n\n  // Handle fetching content from URI\n  const handleFetchContent = useCallback(async () => {\n    const uri = form.getValues('source_uri');\n    if (!uri) return;\n    \n    setIsContentLoading(true);\n    try {\n      const { content, format } = await fetchContentFromUri(uri);\n      form.setValue('source_content', content);\n      form.setValue('content_format', format as 'json' | 'yaml');\n      setCodeLanguage(format as 'json' | 'yaml');\n      toast.success('Content fetched successfully');\n    } catch (error: any) {\n      toast.error('Error fetching content: ' + error.message);\n    } finally {\n      setIsContentLoading(false);\n    }\n  }, [form]);\n\n  // Handle form submission\n  const onSubmit = async (values: ApiFormValues) => {\n    try {\n      setIsSubmitting(true);\n      \n      // Prepare API data\n      const apiData: Partial<ApplicationAPI> = {\n        name: values.name,\n        description: values.description,\n        version: values.version,\n        status: values.status,\n        tags: values.tags,\n        source_uri: values.source_uri,\n        content_format: values.content_format,\n        protocol: values.protocol,\n      };\n      \n      // Include source content if available\n      if (values.source_content) {\n        apiData.source_content = values.source_content;\n      }\n      \n      if (isEditMode) {\n        // Update existing API\n        await updateApi.mutateAsync({ \n          id: apiId as string, \n          ...apiData, \n          fetchContent: shouldFetchContent \n        });\n        toast.success('API updated successfully');\n      } else {\n        // Create new API\n        if (!applicationId) throw new Error('Application ID is missing for create operation.');\n        await createApi.mutateAsync({ \n          application_id: applicationId, \n          ...apiData,\n          fetchContent: shouldFetchContent\n        });\n        toast.success('API created successfully');\n      }\n      \n      // Navigate back to applications page\n      navigate(`/applications/${applicationId}`);\n    } catch (error: any) {\n      console.error('Error saving API:', error);\n      toast.error('Error saving API: ' + error.message);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return {\n    form,\n    isEditMode,\n    isSubmitting,\n    isApiLoading,\n    apiError,\n    sourceType,\n    setSourceType,\n    codeLanguage,\n    setCodeLanguage,\n    handleFetchContent,\n    shouldFetchContent,\n    setShouldFetchContent,\n    initialValues,\n    onSubmit,\n    isContentLoading\n  };\n}\n"],"names":["useApplications","session","useAuth","toast","useToast","queryClient","useQueryClient","isAuthenticated","applications","isLoading","error","useQuery","query","supabase","data","createApplication","useMutation","applicationData","updateApplication","id","updatedApp","deleteApplication","toggleFavorite","favorite","useApplication","fetchContentFromUri","uri","response","headers","corsProxyUrl","contentType","text","format","useApplicationApis","applicationId","apis","createApi","apiData","fetchContent","restData","contentToSave","contentFormat","content","createdApi","err","updateApi","updateData","deleteApi","apiFormSchema","z","useApiForm","apiId","navigate","useNavigate","isEditMode","initialValues","setInitialValues","useState","isSubmitting","setIsSubmitting","isContentLoading","setIsContentLoading","sourceType","setSourceType","codeLanguage","setCodeLanguage","shouldFetchContent","setShouldFetchContent","isApiLoading","apiError","form","useForm","zodResolver","useEffect","selectedApi","a","handleFetchContent","useCallback","values"],"mappings":"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"}