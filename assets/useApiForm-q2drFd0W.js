import{u as C,p as T,q,t as K,r as v,w as Q}from"./react-vendor-TyuC8qxg.js";import{u as R,f as x,s as A,g as f}from"./index-D5uhiMQB.js";import{t as D,z as u}from"./form-components-Bc0kd4dJ.js";try{let t=typeof window<"u"?window:typeof global<"u"?global:typeof globalThis<"u"?globalThis:typeof self<"u"?self:{},r=new t.Error().stack;r&&(t._sentryDebugIds=t._sentryDebugIds||{},t._sentryDebugIds[r]="79099fbd-9d83-46ce-81f0-6b276919b91a",t._sentryDebugIdIdentifier="sentry-dbid-79099fbd-9d83-46ce-81f0-6b276919b91a")}catch{}function N(){const{session:t}=R(),{toast:r}=x(),l=T(),g=!!t.user,{data:i,isLoading:d,error:h}=C({queryKey:["applications"],queryFn:async()=>{const o=A.from("applications").select("*").order("created_at",{ascending:!1}),{data:e,error:c}=await o;if(c)throw c;return e}}),E=q({mutationFn:async o=>{if(!t.user)throw new Error("Authentication required");const{data:e,error:c}=await A.from("applications").insert({name:o.name,description:o.description,category:o.category,status:o.status||"Development",organization_id:o.organization_id,user_id:t.user.id,tags:o.tags||[]}).select().single();if(c)throw c;return e},onSuccess:()=>{l.invalidateQueries({queryKey:["applications"]}),r({title:"Application created",description:"Your new application has been created successfully."})},onError:o=>{r({title:"Error creating application",description:o.message,variant:"destructive"})}}),F=q({mutationFn:async({id:o,...e})=>{if(!t.user)throw new Error("Authentication required");const{data:c,error:p}=await A.from("applications").update({name:e.name,description:e.description,category:e.category,status:e.status,tags:e.tags,updated_at:new Date().toISOString()}).eq("id",o).eq("user_id",t.user.id).select().single();if(p)throw p;return c},onSuccess:()=>{l.invalidateQueries({queryKey:["applications"]}),r({title:"Application updated",description:"The application has been updated successfully."})},onError:o=>{r({title:"Error updating application",description:o.message,variant:"destructive"})}}),S=q({mutationFn:async o=>{if(!t.user)throw new Error("Authentication required");const{error:e}=await A.from("applications").delete().eq("id",o).eq("user_id",t.user.id);if(e)throw e;return o},onSuccess:o=>{l.invalidateQueries({queryKey:["applications"]}),r({title:"Application deleted",description:"The application has been deleted successfully."})},onError:o=>{r({title:"Error deleting application",description:o.message,variant:"destructive"})}}),n=q({mutationFn:async({id:o,favorite:e})=>{if(!t.user)throw new Error("Authentication required");const{data:c,error:p}=await A.from("applications").update({favorite:e}).eq("id",o).eq("user_id",t.user.id).select().single();if(p)throw p;return c},onSuccess:()=>{l.invalidateQueries({queryKey:["applications"]})},onError:o=>{r({title:"Error updating favorite status",description:o.message,variant:"destructive"})}});return{applications:i,isLoading:d,error:h,isAuthenticated:g,createApplication:E,updateApplication:F,deleteApplication:S,toggleFavorite:n}}function O(t){const{session:r}=R();return C({queryKey:["application",t],queryFn:async()=>{if(!t)return null;const{data:l,error:g}=await A.from("applications").select("*").eq("id",t).single();if(g)throw g;return l},enabled:!!t})}async function P(t){console.log("Fetching content from URI:",t);try{let r;const l={Accept:"application/json, application/yaml, text/yaml, text/plain","User-Agent":"Agentico/0.1.0"};if(t.startsWith(window.location.origin)||t.startsWith("data:"))r=await fetch(t,{headers:l});else{const E=`https://corsproxy.io/?${encodeURIComponent(t)}`;r=await fetch(E,{headers:l})}if(!r.ok)throw new Error(`Failed to fetch content: ${r.status} ${r.statusText}`);const i=r.headers.get("content-type")||"",d=await r.text();console.log("Response content type:",i),console.log("Response content length:",d.length);let h="json";return i.includes("yaml")||i.includes("yml")?h="yaml":i.includes("json")||(d.trim().startsWith("{")||d.trim().startsWith("[")?h="json":d.includes(":")&&(d.includes("- ")||/^\s*\w+:\s*\w+/m.test(d))&&(h="yaml")),console.log("Detected format:",h),{content:d,format:h}}catch(r){throw console.error("Error fetching content from URI:",r),r}}function V(t){const{session:r}=R(),l=T(),g=!!(r!=null&&r.user),{data:i,isLoading:d,error:h}=C({queryKey:["application-apis",t],queryFn:async()=>{if(!t)return[];const{data:n,error:o}=await A.from("application_apis").select("*").eq("application_id",t).order("created_at",{ascending:!1});if(o)throw o;return n},enabled:!!t}),E=q({mutationFn:async n=>{if(!(r!=null&&r.user))throw new Error("Authentication required");const{fetchContent:o,...e}=n;let c=e.source_content||"",p=e.content_format||"json";if(o&&e.source_uri)try{const{content:w,format:I}=await P(e.source_uri);c=w,p=I}catch(w){console.error("Failed to fetch content from URI:",w),f.error(`Failed to fetch content from URI: ${w.message}`)}const{data:s,error:m}=await A.from("application_apis").insert({name:e.name,description:e.description,application_id:e.application_id,status:e.status||"active",version:e.version,source_uri:e.source_uri,source_content:c,content_format:p,tags:e.tags||[]}).select();if(m)throw console.error("Error creating API:",m),m;const _=Array.isArray(s)?s[0]:s;if(_.source_content)try{_.source_content=c}catch(w){console.error("Error with returned source_content:",w),_.source_content=""}return _},onSuccess:()=>{l.invalidateQueries({queryKey:["application-apis",t]}),f.success("API created successfully")},onError:n=>{f.error("Error creating API: "+n.message)}}),F=q({mutationFn:async({id:n,fetchContent:o=!1,...e})=>{if(!(r!=null&&r.user))throw new Error("Authentication required");console.log("Updating API with data:",{id:n,fetchContent:o,...e});let c=e.source_content,p=e.content_format||"json";if(o&&e.source_uri)try{const{content:_,format:w}=await P(e.source_uri);c=_,p=w}catch(_){console.error("Failed to fetch content from URI:",_),f.error(`Failed to fetch content from URI: ${_.message}`)}const s={};e.name!==void 0&&(s.name=e.name),e.description!==void 0&&(s.description=e.description),e.status!==void 0&&(s.status=e.status),e.version!==void 0&&(s.version=e.version),e.source_uri!==void 0&&(s.source_uri=e.source_uri),e.tags!==void 0&&(s.tags=e.tags),e.endpoint_url!==void 0&&(s.endpoint_url=e.endpoint_url),e.documentation_url!==void 0&&(s.documentation_url=e.documentation_url),e.protocol!==void 0&&(s.protocol=e.protocol),e.is_public!==void 0&&(s.is_public=e.is_public),c?(s.source_content=c,s.content_format=p):s.source_content=null,s.updated_at=new Date().toISOString(),console.log("Final update data to be sent to Supabase:",s);const{error:m}=await A.from("application_apis").update(s).eq("id",n);if(m)throw console.error("Error updating API:",m),m;return console.log("API updated successfully in Supabase"),{id:n,...e,...s}},onSuccess:n=>{console.log("Update successful, invalidating queries",n),l.invalidateQueries({queryKey:["application-apis",t]}),l.invalidateQueries({queryKey:["application-api",n.id]}),f.success("API updated successfully")},onError:n=>{console.error("Update API error:",n),f.error("Error updating API: "+n.message)}}),S=q({mutationFn:async n=>{if(!(r!=null&&r.user))throw new Error("Authentication required");const{error:o}=await A.from("application_apis").delete().eq("id",n);if(o)throw o;return n},onSuccess:n=>{l.invalidateQueries({queryKey:["application-apis",t]}),f.success("API deleted successfully")},onError:n=>{f.error("Error deleting API: "+n.message)}});return{apis:i,isLoading:d,error:h,isAuthenticated:g,createApi:E,updateApi:F,deleteApi:S}}const $=u.object({name:u.string().min(2,{message:"API Name must be at least 2 characters."}),description:u.string().optional(),version:u.string().optional(),status:u.enum(["active","inactive","deprecated","archived"]).default("active"),tags:u.array(u.string()).optional(),source_uri:u.string().url({message:"Please enter a valid URL."}).optional().or(u.string().length(0)),source_content:u.string().optional(),content_format:u.enum(["json","yaml"]).optional(),protocol:u.enum(["REST","gRPC","WebSockets","GraphQL"]).optional(),endpoint_url:u.string().url({message:"Please enter a valid URL."}).optional().or(u.string().length(0)),documentation_url:u.string().url({message:"Please enter a valid URL."}).optional().or(u.string().length(0)),fetchContent:u.boolean().optional()});function G({applicationId:t,apiId:r}){const l=K(),g=!!r,[i,d]=v.useState(null),[h,E]=v.useState(!1),[F,S]=v.useState(!1),[n,o]=v.useState(),[e,c]=v.useState("json"),[p,s]=v.useState(!1),{apis:m,isLoading:_,error:w,createApi:I,updateApi:L}=V(t||""),b=Q({resolver:D($),defaultValues:{name:"",description:"",version:"",status:"active",tags:[],source_uri:"",source_content:"",content_format:"json",protocol:"REST",endpoint_url:"",documentation_url:""},mode:"onChange"});v.useEffect(()=>{if(console.log("APIs:",m),m&&g){const a=m.find(y=>y.id===r);a&&(d(a),a.source_content?o("content"):a.source_uri&&o("uri"),a.content_format&&c(a.content_format))}else d(null),o(void 0)},[m,g,r]),v.useEffect(()=>{i&&b.reset({name:i.name||"",description:i.description||"",version:i.version||"",status:i.status||"active",tags:i.tags||[],source_uri:i.source_uri||"",source_content:i.source_content||"",content_format:i.content_format||"json",protocol:i.protocol||"REST"})},[i,b]);const j=v.useCallback(async()=>{const a=b.getValues("source_uri");if(a){S(!0);try{const{content:y,format:U}=await P(a);b.setValue("source_content",y),b.setValue("content_format",U),c(U),f.success("Content fetched successfully")}catch(y){f.error("Error fetching content: "+y.message)}finally{S(!1)}}},[b]);return{form:b,isEditMode:g,isSubmitting:h,isApiLoading:_,apiError:w,sourceType:n,setSourceType:o,codeLanguage:e,setCodeLanguage:c,handleFetchContent:j,shouldFetchContent:p,setShouldFetchContent:s,initialValues:i,onSubmit:async a=>{try{E(!0);const y={name:a.name,description:a.description,version:a.version,status:a.status,tags:a.tags,source_uri:a.source_uri,content_format:a.content_format,protocol:a.protocol};if(a.source_content&&(y.source_content=a.source_content),g)await L.mutateAsync({id:r,...y,fetchContent:p}),f.success("API updated successfully");else{if(!t)throw new Error("Application ID is missing for create operation.");await I.mutateAsync({application_id:t,...y,fetchContent:p}),f.success("API created successfully")}l(`/applications/${t}`)}catch(y){console.error("Error saving API:",y),f.error("Error saving API: "+y.message)}finally{E(!1)}},isContentLoading:F}}export{N as a,G as b,P as f,O as u};
//# sourceMappingURL=useApiForm-q2drFd0W.js.map
