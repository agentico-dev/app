{"version":3,"file":"useApplicationServices-nKQmCirh.js","sources":["../../src/hooks/useApplicationServices.tsx"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from './useAuth';\nimport { useToast } from '@/components/ui/use-toast';\nimport type { ApplicationService } from '@/types/application';\n\nexport function useApplicationServices(applicationId?: string, apiId?: string) {\n  const { session } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const isAuthenticated = !!session?.user;\n\n  // Fetch all services for an application or a specific API\n  const { data: services, isLoading, error } = useQuery({\n    queryKey: ['application-services', applicationId, apiId],\n    queryFn: async () => {\n      // If neither applicationId nor apiId is provided, return empty array\n      if (!applicationId && !apiId) return [];\n      \n      let query = supabase\n        .from('application_services')\n        .select('*');\n      \n      // If apiId is provided, filter by api_id\n      if (apiId) {\n        query = query.eq('api_id', apiId);\n      } \n      // Otherwise, if only applicationId is provided, filter by application_id\n      else if (applicationId) {\n        query = query.eq('application_id', applicationId);\n      }\n      \n      const { data, error } = await query.order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      return data as ApplicationService[];\n    },\n    enabled: !!(applicationId || apiId),\n  });\n\n  // Create a new service\n  const createService = useMutation({\n    mutationFn: async (serviceData: Partial<ApplicationService>) => {\n      if (!session?.user) throw new Error('Authentication required');\n      \n      const { data, error } = await supabase\n        .from('application_services')\n        .insert({\n          name: serviceData.name,\n          description: serviceData.description,\n          application_id: serviceData.application_id,\n          api_id: serviceData.api_id,\n          status: serviceData.status || 'active',\n          service_type: serviceData.service_type,\n          tags: serviceData.tags || [],\n          method: serviceData.method,\n          path: serviceData.path,\n          summary: serviceData.summary,\n        })\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: (_, variables) => {\n      // Invalidate both application and API queries\n      if (variables.application_id) {\n        queryClient.invalidateQueries({ queryKey: ['application-services', variables.application_id] });\n      }\n      if (variables.api_id) {\n        queryClient.invalidateQueries({ queryKey: ['application-services', applicationId, variables.api_id] });\n      }\n      queryClient.invalidateQueries({ queryKey: ['application-services'] });\n      toast({\n        title: 'Service created',\n        description: 'The service has been created successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating service',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update a service\n  const updateService = useMutation({\n    mutationFn: async ({ id, ...data }: Partial<ApplicationService> & { id: string }) => {\n      if (!session?.user) throw new Error('Authentication required');\n      \n      const { data: updatedService, error } = await supabase\n        .from('application_services')\n        .update({\n          name: data.name,\n          description: data.description,\n          status: data.status,\n          service_type: data.service_type,\n          api_id: data.api_id,\n          tags: data.tags,\n          method: data.method,\n          path: data.path,\n          summary: data.summary,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', id)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return updatedService;\n    },\n    onSuccess: (data) => {\n      // Invalidate both application and API queries\n      if (data.application_id) {\n        queryClient.invalidateQueries({ queryKey: ['application-services', data.application_id] });\n      }\n      if (data.api_id) {\n        queryClient.invalidateQueries({ queryKey: ['application-services', applicationId, data.api_id] });\n      }\n      queryClient.invalidateQueries({ queryKey: ['application-services'] });\n      toast({\n        title: 'Service updated',\n        description: 'The service has been updated successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating service',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete a service\n  const deleteService = useMutation({\n    mutationFn: async (id: string) => {\n      if (!session?.user) throw new Error('Authentication required');\n      \n      const { error } = await supabase\n        .from('application_services')\n        .delete()\n        .eq('id', id);\n      \n      if (error) throw error;\n      return id;\n    },\n    onSuccess: (_, id) => {\n      // Invalidate both application and API queries\n      if (applicationId) {\n        queryClient.invalidateQueries({ queryKey: ['application-services', applicationId] });\n      }\n      if (apiId) {\n        queryClient.invalidateQueries({ queryKey: ['application-services', applicationId, apiId] });\n      }\n      queryClient.invalidateQueries({ queryKey: ['application-services'] });\n      toast({\n        title: 'Service deleted',\n        description: 'The service has been deleted successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error deleting service',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Get all services (for selecting in AI tools)\n  const { data: allServices } = useQuery({\n    queryKey: ['all-services'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('application_services')\n        .select('*, application:application_id(name)')\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      return data as (ApplicationService & { application: { name: string } })[];\n    },\n  });\n\n  return {\n    services,\n    allServices,\n    isLoading,\n    error,\n    isAuthenticated,\n    createService,\n    updateService,\n    deleteService,\n  };\n}\n\n// Get a single service by ID\nexport function useApplicationService(id?: string) {\n  const { session } = useAuth();\n  \n  return useQuery({\n    queryKey: ['application-service', id],\n    queryFn: async () => {\n      if (!id) return null;\n      \n      const { data, error } = await supabase\n        .from('application_services')\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (error) throw error;\n      return data as ApplicationService;\n    },\n    enabled: !!id,\n  });\n}\n"],"names":["useApplicationServices","applicationId","apiId","session","useAuth","toast","useToast","queryClient","useQueryClient","isAuthenticated","services","isLoading","error","useQuery","query","supabase","data","createService","useMutation","serviceData","_","variables","updateService","id","updatedService","deleteService","allServices","useApplicationService"],"mappings":"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"}