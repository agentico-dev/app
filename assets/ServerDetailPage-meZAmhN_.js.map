{"version":3,"file":"ServerDetailPage-meZAmhN_.js","sources":["../../node_modules/lucide-react/dist/esm/icons/folder-input.js","../../src/hooks/servers/useServerDetails.tsx","../../src/hooks/servers/tools/useServerTools.tsx","../../src/hooks/servers/tools/useProjectTools.tsx","../../src/hooks/servers/tools/useOrganizationTools.tsx","../../src/hooks/servers/tools/useToolMutations.tsx","../../src/hooks/servers/useServerAITools.tsx","../../src/components/servers/detail/tools/AIToolsSearch.tsx","../../src/components/servers/detail/tools/AIToolsTableHeader.tsx","../../src/components/servers/detail/tools/AIToolTableRow.tsx","../../src/components/servers/detail/tools/OrganizationLevelWarning.tsx","../../src/components/servers/detail/tools/AIToolsEmptyState.tsx","../../src/components/servers/detail/tools/AIToolsLoadingState.tsx","../../src/components/servers/detail/AIToolsTable.tsx","../../src/components/servers/detail/ServerTabs.tsx","../../src/pages/servers/ServerDetailPage.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst FolderInput = createLucideIcon(\"FolderInput\", [\n  [\n    \"path\",\n    {\n      d: \"M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1\",\n      key: \"fm4g5t\"\n    }\n  ],\n  [\"path\", { d: \"M2 13h10\", key: \"pgb2dq\" }],\n  [\"path\", { d: \"m9 16 3-3-3-3\", key: \"6m91ic\" }]\n]);\n\nexport { FolderInput as default };\n//# sourceMappingURL=folder-input.js.map\n","\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\n\n/**\n * Hook to fetch server details including organization_id\n */\nexport function useServerDetails(serverId?: string) {\n  return useQuery({\n    queryKey: ['server-detail', serverId],\n    queryFn: async () => {\n      if (!serverId) return null;\n      \n      const { data, error } = await supabase\n        .from('servers')\n        .select('organization_id')\n        .eq('id', serverId)\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    enabled: !!serverId,\n  });\n}\n","\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { EnhancedAITool } from '@/types/ai-tool';\n\n/**\n * Hook to fetch AI tools linked to a server\n */\nexport function useServerTools(serverId?: string) {\n  return useQuery({\n    queryKey: ['server-ai-tools', serverId],\n    queryFn: async () => {\n      if (!serverId) return [];\n      \n      const { data, error } = await supabase\n        .from('server_tools')\n        .select('*, ai_tool:ai_tool_id(*)')\n        .eq('server_id', serverId);\n      \n      if (error) throw error;\n      \n      return data.map(item => ({\n        ...item.ai_tool,\n        associated: true\n      })) as EnhancedAITool[];\n    },\n    enabled: !!serverId,\n  });\n}\n","\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { EnhancedAITool } from '@/types/ai-tool';\n\n/**\n * Hook to fetch AI tools linked to a project\n */\nexport function useProjectTools(projectId?: string) {\n  return useQuery({\n    queryKey: ['project-tools', projectId],\n    queryFn: async () => {\n      if (!projectId) return [];\n      \n      const { data, error } = await supabase\n        .from('project_tools')\n        .select('*, ai_tool:ai_tool_id(*)')\n        .eq('project_id', projectId);\n      \n      if (error) throw error;\n      \n      return data.map(item => ({\n        ...item.ai_tool,\n        associated: false\n      })) as EnhancedAITool[];\n    },\n    enabled: !!projectId,\n  });\n}\n","\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { EnhancedAITool } from '@/types/ai-tool';\n\n/**\n * Hook to fetch AI tools linked to an organization\n */\nexport function useOrganizationTools(organizationId?: string) {\n  return useQuery({\n    queryKey: ['organization-tools', organizationId],\n    queryFn: async () => {\n      if (!organizationId) return [];\n      \n      const { data, error } = await supabase\n        .from('ai_tools')\n        .select('*')\n        .eq('organization_id', organizationId);\n      \n      if (error) throw error;\n      \n      return data.map(tool => ({\n        ...tool,\n        associated: false\n      })) as EnhancedAITool[];\n    },\n    enabled: !!organizationId,\n  });\n}\n","\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\n\n/**\n * Hook for AI tool association mutations (link and unlink)\n */\nexport function useToolMutations(serverId?: string) {\n  const { session } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const linkAITool = useMutation({\n    mutationFn: async ({ serverId, aiToolId }: { serverId: string; aiToolId: string }) => {\n      if (!session?.user) throw new Error('Authentication required');\n      \n      const { data, error } = await supabase\n        .from('server_tools')\n        .insert({\n          server_id: serverId,\n          ai_tool_id: aiToolId,\n        })\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['server-ai-tools', serverId] });\n      toast({\n        title: 'AI Tool linked',\n        description: 'The AI tool has been linked to the server successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error linking AI tool',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const unlinkAITool = useMutation({\n    mutationFn: async ({ serverId, aiToolId }: { serverId: string; aiToolId: string }) => {\n      if (!session?.user) throw new Error('Authentication required');\n      \n      const { error } = await supabase\n        .from('server_tools')\n        .delete()\n        .eq('server_id', serverId)\n        .eq('ai_tool_id', aiToolId);\n      \n      if (error) throw error;\n      return { serverId, aiToolId };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['server-ai-tools', serverId] });\n      toast({\n        title: 'AI Tool unlinked',\n        description: 'The AI tool has been unlinked from the server successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error unlinking AI tool',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  return {\n    linkAITool,\n    unlinkAITool\n  };\n}\n","import { useState, useEffect } from 'react';\nimport { toast } from 'sonner';\nimport { EnhancedAITool } from '@/types/ai-tool';\nimport { useServerDetails } from './useServerDetails';\nimport { useServerTools } from './tools/useServerTools';\nimport { useProjectTools } from './tools/useProjectTools';\nimport { useOrganizationTools } from './tools/useOrganizationTools';\nimport { useToolMutations } from './tools/useToolMutations';\n\n/**\n * Main hook to manage server-AI tool relationships\n * This hook combines multiple smaller hooks to provide comprehensive AI tools management\n */\nexport function useServerAITools(serverId?: string, projectId?: string) {\n  const [availableTools, setAvailableTools] = useState<EnhancedAITool[]>([]);\n  const [associatedTools, setAssociatedTools] = useState<EnhancedAITool[]>([]);\n  const [isOrganizationLevel, setIsOrganizationLevel] = useState(false);\n  \n  // Fetch server information to get organization_id\n  const { data: serverData } = useServerDetails(serverId);\n\n  // Fetch AI tools from different sources\n  const { data: serverTools, isLoading: isLoadingServerTools } = useServerTools(serverId);\n  const { data: projectTools, isLoading: isLoadingProjectTools } = useProjectTools(projectId);\n  const { data: organizationTools, isLoading: isLoadingOrgTools } = useOrganizationTools(\n    serverData?.organization_id\n  );\n\n  // Get tool mutation functions\n  const { linkAITool, unlinkAITool } = useToolMutations(serverId);\n\n  // Process and separate available and associated tools\n  useEffect(() => {\n    if (serverTools) {\n      // Set associated tools from server_tools table\n      const associated = serverTools || [];\n      const associatedIds = associated.map(tool => tool.id);\n      \n      // If project is provided, use project tools as available tools\n      if (projectId && projectTools) {\n        setIsOrganizationLevel(false);\n        const available = projectTools.filter(tool => !associatedIds.includes(tool.id));\n        setAvailableTools(available);\n        setAssociatedTools(associated);\n      } \n      // Otherwise use organization tools as available tools\n      else if (serverData?.organization_id && organizationTools) {\n        setIsOrganizationLevel(true);\n        // Show warning toast about using organization-level tools\n        toast.warning(\"Displaying organization-level AI tools. Connect this server to a project for project-specific tools.\");\n        \n        const available = organizationTools.filter(tool => !associatedIds.includes(tool.id));\n        setAvailableTools(available);\n        setAssociatedTools(associated);\n      } else {\n        setAvailableTools([]);\n        setAssociatedTools(associated);\n      }\n    }\n  }, [serverTools, projectTools, organizationTools, projectId, serverData]);\n\n  return {\n    aiTools: [...availableTools, ...associatedTools],\n    availableTools,\n    associatedTools,\n    isLoading: isLoadingServerTools || isLoadingProjectTools || isLoadingOrgTools,\n    isOrganizationLevel,\n    linkAITool,\n    unlinkAITool,\n  };\n}\n","\nimport { Search } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\n\ninterface AIToolsSearchProps {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n}\n\nexport function AIToolsSearch({ searchTerm, setSearchTerm }: AIToolsSearchProps) {\n  return (\n    <div className=\"relative flex-1\">\n      <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n      <Input\n        type=\"search\"\n        placeholder=\"Search tools by name or description...\"\n        className=\"pl-8\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n      />\n    </div>\n  );\n}\n","\nimport { ArrowUp, ArrowDown } from 'lucide-react';\nimport { \n  TableHead,\n  TableHeader,\n  TableRow \n} from '@/components/ui/table';\nimport { EnhancedAITool } from '@/types/ai-tool';\n\ninterface AIToolsTableHeaderProps {\n  sortField: keyof EnhancedAITool | 'associated';\n  sortDirection: 'asc' | 'desc';\n  onSort: (field: keyof EnhancedAITool | 'associated') => void;\n}\n\nexport function AIToolsTableHeader({ \n  sortField, \n  sortDirection, \n  onSort \n}: AIToolsTableHeaderProps) {\n  return (\n    <TableHeader>\n      <TableRow>\n        <TableHead className=\"w-[80px]\">\n          <div \n            className=\"flex items-center cursor-pointer\" \n            onClick={() => onSort('associated')}\n          >\n            Associated\n            {sortField === 'associated' && (\n              sortDirection === 'asc' ? <ArrowUp className=\"ml-1 h-4 w-4\" /> : <ArrowDown className=\"ml-1 h-4 w-4\" />\n            )}\n          </div>\n        </TableHead>\n        <TableHead>\n          <div \n            className=\"flex items-center cursor-pointer\" \n            onClick={() => onSort('name')}\n          >\n            Name\n            {sortField === 'name' && (\n              sortDirection === 'asc' ? <ArrowUp className=\"ml-1 h-4 w-4\" /> : <ArrowDown className=\"ml-1 h-4 w-4\" />\n            )}\n          </div>\n        </TableHead>\n        <TableHead>Description</TableHead>\n        <TableHead>\n          <div \n            className=\"flex items-center cursor-pointer\" \n            onClick={() => onSort('status')}\n          >\n            Status\n            {sortField === 'status' && (\n              sortDirection === 'asc' ? <ArrowUp className=\"ml-1 h-4 w-4\" /> : <ArrowDown className=\"ml-1 h-4 w-4\" />\n            )}\n          </div>\n        </TableHead>\n        <TableHead>Related Services</TableHead>\n      </TableRow>\n    </TableHeader>\n  );\n}\n","\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Link } from 'react-router';\nimport { TableCell, TableRow } from '@/components/ui/table';\nimport { EnhancedAITool } from '@/types/ai-tool';\n\ninterface AIToolTableRowProps {\n  tool: EnhancedAITool;\n  onAssociateChange: (toolId: string, associated: boolean) => Promise<void>;\n}\n\nexport function AIToolTableRow({ tool, onAssociateChange }: AIToolTableRowProps) {\n  // Status color mapping\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'development': return 'bg-blue-100 text-blue-800';\n      case 'maintenance': return 'bg-yellow-100 text-yellow-800';\n      case 'archived': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <TableRow key={tool.id}>\n      <TableCell>\n        <Switch\n          checked={tool.associated}\n          onCheckedChange={(checked) => onAssociateChange(tool.id, checked)}\n        />\n      </TableCell>\n      <TableCell className=\"font-medium\">{tool.name}</TableCell>\n      <TableCell>{tool.description || 'No description'}</TableCell>\n      <TableCell>\n        <Badge \n          variant=\"outline\" \n          className={`${getStatusColor(tool.status)}`}\n        >\n          {tool.status}\n        </Badge>\n      </TableCell>\n      <TableCell>\n        <div className=\"space-y-1\">\n          {tool.application_service && (\n            <div className=\"text-sm\">\n              <span className=\"font-medium\">Service:</span>{' '}\n              {tool.application_service.name}\n            </div>\n          )}\n          {tool.application_api && (\n            <div className=\"text-sm\">\n              <span className=\"font-medium\">API:</span>{' '}\n              <Link \n                to={`/applications/${tool.application?.id}/apis/${tool.application_api.id}`}\n                className=\"text-primary hover:underline\"\n              >\n                {tool.application_api.name} {tool.application_api.version}\n              </Link>\n            </div>\n          )}\n          {tool.application && (\n            <div className=\"text-sm\">\n              <span className=\"font-medium\">Application:</span>{' '}\n              <Link \n                to={`/applications/${tool.application.slug}`}\n                className=\"text-primary hover:underline\"\n              >\n                {tool.application.name}\n              </Link>\n            </div>\n          )}\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n}\n","\ninterface OrganizationLevelWarningProps {\n  isOrganizationLevel: boolean;\n}\n\nexport function OrganizationLevelWarning({ isOrganizationLevel }: OrganizationLevelWarningProps) {\n  if (!isOrganizationLevel) return null;\n  \n  return (\n    <div className=\"bg-amber-100 border-l-4 border-amber-500 text-amber-700 p-4 mb-4 rounded\">\n      <p className=\"font-medium\">Tools listed are at organization level.</p>\n      <p className=\"text-sm\">Associate this server with a project to see project-specific tools.</p>\n    </div>\n  );\n}\n","\nimport { TableCell, TableRow } from '@/components/ui/table';\n\nexport function AIToolsEmptyState() {\n  return (\n    <TableRow>\n      <TableCell colSpan={5} className=\"h-24 text-center\">\n        No tools found.\n      </TableCell>\n    </TableRow>\n  );\n}\n","\nexport function AIToolsLoadingState() {\n  return (\n    <div className=\"flex items-center justify-center p-8\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary\"></div>\n    </div>\n  );\n}\n","\nimport { useState } from 'react';\nimport { \n  Table, \n  TableBody, \n  TableCaption\n} from '@/components/ui/table';\nimport { useToast } from '@/hooks/use-toast';\nimport { EnhancedAITool } from '@/types/ai-tool';\nimport { AIToolsSearch } from './tools/AIToolsSearch';\nimport { AIToolsTableHeader } from './tools/AIToolsTableHeader';\nimport { AIToolTableRow } from './tools/AIToolTableRow';\nimport { OrganizationLevelWarning } from './tools/OrganizationLevelWarning';\nimport { AIToolsEmptyState } from './tools/AIToolsEmptyState';\nimport { AIToolsLoadingState } from './tools/AIToolsLoadingState';\n\ninterface AIToolsTableProps {\n  availableTools: EnhancedAITool[];\n  associatedTools: EnhancedAITool[];\n  isLoading: boolean;\n  onAssociateChange: (toolId: string, associated: boolean) => Promise<void>;\n  isOrganizationLevel?: boolean;\n}\n\nexport function ServerAIToolsTable({ \n  availableTools, \n  associatedTools, \n  isLoading, \n  onAssociateChange,\n  isOrganizationLevel = false\n}: AIToolsTableProps) {\n  const { toast } = useToast();\n  \n  // Combine available and associated tools\n  const allTools = [\n    ...availableTools.map(tool => ({...tool, associated: false})), \n    ...associatedTools.map(tool => ({...tool, associated: true}))\n  ];\n  \n  // State for search and sorting\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortField, setSortField] = useState<keyof EnhancedAITool | 'associated'>('name');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  \n  // Filter tools based on search term\n  const filteredTools = allTools.filter(tool => \n    tool.name.toLowerCase().includes(searchTerm.toLowerCase()) || \n    (tool.description && tool.description.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n  \n  // Sort tools based on sort field and direction\n  const sortedTools = [...filteredTools].sort((a, b) => {\n    if (sortField === 'associated') {\n      return sortDirection === 'asc' \n        ? Number(a.associated) - Number(b.associated)\n        : Number(b.associated) - Number(a.associated);\n    }\n    \n    const aValue = a[sortField as keyof EnhancedAITool];\n    const bValue = b[sortField as keyof EnhancedAITool];\n    \n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return sortDirection === 'asc' \n        ? aValue.localeCompare(bValue)\n        : bValue.localeCompare(aValue);\n    }\n    \n    return 0;\n  });\n  \n  // Handle sort\n  const handleSort = (field: keyof EnhancedAITool | 'associated') => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n  \n  if (isLoading) {\n    return <AIToolsLoadingState />;\n  }\n  \n  return (\n    <div className=\"space-y-4\">\n      <OrganizationLevelWarning isOrganizationLevel={isOrganizationLevel} />\n      \n      <div className=\"flex items-center gap-2\">\n        <AIToolsSearch \n          searchTerm={searchTerm} \n          setSearchTerm={setSearchTerm} \n        />\n      </div>\n      \n      <div className=\"rounded-md border\">\n        <Table>\n          <TableCaption>\n            {sortedTools.length === 0 \n              ? 'No AI tools available.' \n              : `Showing ${sortedTools.length} AI tools`}\n          </TableCaption>\n          \n          <AIToolsTableHeader \n            sortField={sortField} \n            sortDirection={sortDirection} \n            onSort={handleSort} \n          />\n          \n          <TableBody>\n            {sortedTools.length === 0 ? (\n              <AIToolsEmptyState />\n            ) : (\n              sortedTools.map((tool) => (\n                <AIToolTableRow \n                  key={tool.id} \n                  tool={tool} \n                  onAssociateChange={onAssociateChange} \n                />\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}\n","\nimport { FolderInput } from 'lucide-react';\nimport { ResourceTabs } from '../../detail/ResourceTabs';\nimport { Server } from '@/types/server';\nimport { ServerAIToolsTable } from './AIToolsTable';\nimport { useServerAITools } from '@/hooks/servers/useServerAITools';\nimport { toast } from 'sonner';\n\ninterface ServerTabsProps {\n  server: Server;\n}\n\nexport function ServerTabs({ server }: ServerTabsProps) {\n  const { \n    aiTools, \n    availableTools, \n    associatedTools, \n    isLoading, \n    isOrganizationLevel,\n    linkAITool,\n    unlinkAITool\n  } = useServerAITools(server.id, server.project_id);\n  \n  const handleAssociationToggle = async (toolId: string, associate: boolean) => {\n    try {\n      if (associate) {\n        await linkAITool.mutateAsync({ serverId: server.id, aiToolId: toolId });\n      } else {\n        await unlinkAITool.mutateAsync({ serverId: server.id, aiToolId: toolId });\n      }\n    } catch (error) {\n      console.error('Error toggling tool association:', error);\n      toast.error('Failed to update tool association');\n    }\n  };\n\n  return (\n    <ResourceTabs\n      defaultTab=\"ai-tools\"\n      tabs={[\n        {\n          value: 'overview',\n          label: 'Overview',\n          description: 'Detailed information about this server',\n          content: (\n            <p className=\"text-muted-foreground\">\n              {server.description || 'No detailed description available for this server.'}\n            </p>\n          ),\n        },\n        {\n          value: 'ai-tools',\n          label: `AI Tools (${associatedTools?.length || 0})`,\n          description: `AI tools associated to this server ${isOrganizationLevel ? 'at organization level' : 'at project level'}`,\n          reference: isOrganizationLevel\n            ? null\n            : `/projects/${server.project_id}`,\n          icon: <FolderInput className=\"h-4 w-4\" />,\n          content: (\n            <ServerAIToolsTable\n              availableTools={availableTools || []}\n              associatedTools={associatedTools || []}\n              isLoading={isLoading}\n              onAssociateChange={handleAssociationToggle}\n              isOrganizationLevel={isOrganizationLevel}\n            />\n          ),\n        },\n        {\n          value: 'logs',\n          label: 'Logs',\n          description: 'System logs and monitoring',\n          content: (\n            <div className=\"text-center p-6\">\n              <p className=\"text-muted-foreground\">\n                Log monitoring is not available for this server.\n              </p>\n            </div>\n          ),\n        },\n      ]}\n    />\n  );\n}\n","\nimport { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { DetailPageLayout } from '@/components/detail/DetailPageLayout';\nimport { ResourceHeader } from '@/components/detail/ResourceHeader';\nimport { ServerResourceCards } from '@/components/servers/detail/ServerResourceCards';\nimport { ServerTabs } from '@/components/servers/detail/ServerTabs';\nimport { Server } from '@/types/server';\nimport { useTags } from '@/contexts/TagsContext';\nimport { Badge } from '@/components/ui/badge';\nimport Editor from '@monaco-editor/react';\nimport { FilesIcon } from 'lucide-react';\n\nexport default function ServerDetailPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [server, setServer] = useState<Server | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { tags } = useTags();\n  const [isActionsOpen, setIsActionsOpen] = useState(false);\n  const [showCodeView, setShowCodeView] = useState(false);\n  const [codeContent, setCodeContent] = useState('');\n\n  useEffect(() => {\n    const fetchServerDetails = async () => {\n      if (!id) return;\n      \n      setIsLoading(true);\n      try {\n        console.log('Fetching server details for ID/slug:', id);\n        \n        let query = supabase.from('servers')\n          .select(`\n            *,\n            project_servers!inner (\n              project_id\n            )\n          `);\n        \n        // Check if the ID is a UUID format or a slug\n        const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(id);\n        if (isUuid) {\n          query = query.eq('id', id);\n        } else {\n          query = query.eq('slug', id);\n        }\n        \n        let { data, error } = await query;\n        \n        if (error) {\n          // If no results found with inner join, try without the join\n          query = supabase.from('servers').select('*');\n          if (isUuid) {\n            query = query.eq('id', id);\n          } else {\n            query = query.eq('slug', id);\n          }\n          \n          const result = await query.single();\n          data = result.data;\n          error = result.error;\n        }\n        \n        if (error) {\n          console.error('Error fetching server details:', error);\n          toast.error(`Failed to load server: ${error.message}`);\n          throw error;\n        }\n        \n        // Process the data to extract project_id if available\n        let serverData;\n        if (Array.isArray(data) && data.length > 0) {\n          const firstResult = data[0];\n          // Extract the project_id if available\n          const projectId = firstResult.project_servers?.length > 0 \n            ? firstResult.project_servers[0].project_id \n            : null;\n            \n          // Create the server object with project_id\n          serverData = {\n            ...firstResult,\n            project_id: projectId\n          };\n          delete serverData.project_servers;\n        } else {\n          serverData = data;\n        }\n        \n        console.log('Fetched server details:', serverData);\n        setServer(serverData as Server);\n        \n        \n        const dataCodeTMP = {\n          'comming soon': 'project details',\n          'see_project_management_demo': 'https://youtu.be/4JJ30ytn-yY',\n          'see_oas_to_mcp_demo': 'https://youtu.be/kR4pP5VZgKw',\n         }; // Placeholder for actual data fetching logic\n        // Set initial code content\n        setCodeContent(JSON.stringify(dataCodeTMP, null, 2));\n      } catch (error) {\n        console.error('Error in server fetch:', error);\n        toast.error('Failed to load server details');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    fetchServerDetails();\n  }, [id]);\n\n  const handleGoBack = () => {\n    navigate(-1);\n  };\n\n  const handleEditServer = () => {\n    // Navigate to edit server page using slug\n    if (server) {\n      navigate(`/servers/${server.slug}/edit`);\n    }\n  };\n\n  const handleDeleteServer = async () => {\n    if (!server) return;\n    \n    try {\n      const { error } = await supabase\n        .from('servers')\n        .delete()\n        .eq('id', server.id);\n      \n      if (error) throw error;\n      \n      toast.success('Server deleted successfully');\n      navigate('/servers');\n    } catch (error: any) {\n      console.error('Error deleting server:', error);\n      toast.error(`Failed to delete server: ${error.message}`);\n    }\n  };\n  \n  const handleImportServer = async () => {\n    if (!server) return;\n    // simulate import process\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n    // @todo After import, I can update the server status or any other field\n    toast.success('Server imported successfully');\n  };\n  const handleExportServer = async () => {\n    if (!server) return;\n    // simulate import process\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n    // @todo After import, I can update the server status or any other field\n    toast.success('Server exported successfully');\n  };\n  const handleDeployServer = async () => {\n    if (!server) return;\n    // simulate import process\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n    // @todo After import, I can update the server status or any other field\n    toast.success('Server deployed successfully');\n  };\n  const handleUndeployServer = async () => {\n    if (!server) return;\n    // simulate import process\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n    // @todo After import, I can update the server status or any other field\n    toast.success('Server undeployed successfully');\n  };\n\n  const getStatusColorClass = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'active': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'development': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'maintenance': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'deprecated': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'planning': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300';\n      case 'inactive': return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n    }\n  };\n\n  const renderTagBadges = () => {\n    return server!.tags?.map((tagId) => {\n      const tagName = tags.find(t => t.id === tagId)?.name || 'Unknown';\n      return (\n        <Badge key={tagId} variant=\"secondary\">{tagName}</Badge>\n      );\n    });\n  };\n\n  return (\n    <DetailPageLayout\n      isLoading={isLoading}\n      resource={server}\n      resourceType=\"Server\"\n      onGoBack={handleGoBack}\n      renderResource={() => (\n        <>\n          <ResourceHeader\n            title={server!.name}\n            description={server!.description}\n            isFavorite={server!.favorite}\n            status={server!.status}\n            tags={[\n              <Badge key=\"type\" variant=\"outline\">{server!.type}</Badge>,\n              ...renderTagBadges()\n            ]}\n            statusColorClass={getStatusColorClass(server!.status)}\n            onEdit={handleEditServer}\n            onDelete={handleDeleteServer}\n            resourceId={server!.id}\n            resourceType=\"Server\"\n            isActionsOpen={isActionsOpen}\n            setIsActionsOpen={setIsActionsOpen}\n            showCodeView={showCodeView}\n            setShowCodeView={setShowCodeView}\n            handleImport={handleImportServer}\n            handleExport={handleExportServer}\n            handleDeploy={handleDeployServer}\n            handleUndeploy={handleUndeployServer}\n          />\n          \n          {/* <ServerResourceCards server={server!} /> */}\n          \n          {showCodeView ? (\n            <div className=\"mt-6 border rounded-md overflow-hidden\">\n              <div className=\"p-2 bg-muted border-b flex items-center\">\n                <FilesIcon className=\"h-4 w-4 mr-2\" />\n                <span className=\"text-sm font-medium\">Server Code View</span>\n              </div>\n              <div className=\"h-[500px]\">\n                <Editor\n                  height=\"100%\"\n                  defaultLanguage=\"json\"\n                  defaultValue={codeContent}\n                  options={{\n                    readOnly: false,\n                    minimap: { enabled: false },\n                    scrollBeyondLastLine: false,\n                    automaticLayout: true,\n                  }}\n                  onChange={(value) => setCodeContent(value || '')}\n                />\n              </div>\n            </div>\n          ) : (\n            <ServerTabs server={server!} />\n          )}\n        </>\n      )}\n    />\n  );\n}\n"],"names":["FolderInput","createLucideIcon","useServerDetails","serverId","useQuery","data","error","supabase","useServerTools","item","useProjectTools","projectId","useOrganizationTools","organizationId","tool","useToolMutations","session","useAuth","toast","useToast","queryClient","useQueryClient","linkAITool","useMutation","aiToolId","unlinkAITool","useServerAITools","availableTools","setAvailableTools","useState","associatedTools","setAssociatedTools","isOrganizationLevel","setIsOrganizationLevel","serverData","serverTools","isLoadingServerTools","projectTools","isLoadingProjectTools","organizationTools","isLoadingOrgTools","useEffect","associated","associatedIds","available","AIToolsSearch","searchTerm","setSearchTerm","jsxs","jsx","Search","Input","e","AIToolsTableHeader","sortField","sortDirection","onSort","TableHeader","TableRow","TableHead","ArrowUp","ArrowDown","AIToolTableRow","onAssociateChange","getStatusColor","status","TableCell","Switch","checked","Badge","Link","_a","OrganizationLevelWarning","AIToolsEmptyState","AIToolsLoadingState","ServerAIToolsTable","isLoading","allTools","setSortField","setSortDirection","sortedTools","a","b","aValue","bValue","handleSort","field","Table","TableCaption","TableBody","ServerTabs","server","handleAssociationToggle","toolId","associate","ResourceTabs","ServerDetailPage","id","useParams","navigate","useNavigate","setServer","setIsLoading","tags","useTags","isActionsOpen","setIsActionsOpen","showCodeView","setShowCodeView","codeContent","setCodeContent","query","isUuid","result","firstResult","handleGoBack","handleEditServer","handleDeleteServer","handleImportServer","resolve","handleExportServer","handleDeployServer","handleUndeployServer","getStatusColorClass","renderTagBadges","tagId","tagName","t","DetailPageLayout","Fragment","ResourceHeader","FilesIcon","Editor","value"],"mappings":"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","x_google_ignoreList":[0]}