{"version":3,"file":"NewProjectPage-BY-Aq8LR.js","sources":["../../src/pages/studio/NewProjectPage.tsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { toast } from 'sonner';\nimport { useAuth } from '@/hooks/useAuth';\nimport { ArrowLeft, Loader2 } from 'lucide-react';\n\nexport default function NewProjectPage() {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  \n  const aiGenerated = searchParams.get('aiGenerated') === 'true';\n  const prompt = searchParams.get('prompt') || '';\n  \n  const [projectName, setProjectName] = useState('');\n  const [projectDescription, setProjectDescription] = useState('');\n  const [isShared, setIsShared] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(aiGenerated);\n  const [isCreating, setIsCreating] = useState(false);\n\n  useEffect(() => {\n    // If this is AI-generated, simulate AI generating a name and description\n    if (aiGenerated && prompt) {\n      const timer = setTimeout(() => {\n        // In a real app, this would come from an AI service\n        const generatedName = prompt\n          .split(' ')\n          .slice(0, 3)\n          .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n          .join(' ') + ' Workflow';\n        \n        setProjectName(generatedName);\n        setProjectDescription(prompt);\n        setIsGenerating(false);\n      }, 2000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [aiGenerated, prompt]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!projectName.trim()) {\n      toast.error('Project name is required');\n      return;\n    }\n    \n    setIsCreating(true);\n    \n    // Simulate project creation\n    setTimeout(() => {\n      const newProjectId = Date.now().toString();\n      toast.success('Project created successfully');\n      navigate(`/studio/projects/${newProjectId}`);\n    }, 1000);\n  };\n\n  const handleCancel = () => {\n    navigate('/studio');\n  };\n\n  if (isGenerating) {\n    return (\n      <div className=\"container mx-auto p-6 flex flex-col items-center justify-center min-h-[50vh]\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-12 w-12 animate-spin mx-auto mb-4 text-primary\" />\n          <h2 className=\"text-2xl font-semibold mb-2\">Generating Your Project</h2>\n          <p className=\"text-muted-foreground mb-8 max-w-md\">\n            We're using AI to create a project based on your prompt:<br /> \n            <span className=\"font-medium italic\">\"{prompt}\"</span>\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"mb-6\">\n        <Button variant=\"ghost\" onClick={handleCancel}>\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back to Studio\n        </Button>\n      </div>\n      \n      <Card className=\"mx-auto max-w-xl\">\n        <CardHeader>\n          <CardTitle>Create New Project</CardTitle>\n          <CardDescription>\n            {aiGenerated\n              ? 'We\\'ve generated this project based on your prompt. You can edit the details before creating it.'\n              : 'Set up a new project to organize your AI workflows.'}\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Project Name</Label>\n              <Input\n                id=\"name\"\n                value={projectName}\n                onChange={(e) => setProjectName(e.target.value)}\n                placeholder=\"Enter project name\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={projectDescription}\n                onChange={(e) => setProjectDescription(e.target.value)}\n                placeholder=\"Describe what this project will do\"\n                rows={4}\n              />\n            </div>\n            \n            <div className=\"flex items-center space-x-2 pt-2\">\n              <Checkbox\n                id=\"shared\"\n                checked={isShared}\n                onCheckedChange={(checked) => setIsShared(checked as boolean)}\n              />\n              <Label htmlFor=\"shared\" className=\"text-sm font-normal\">\n                Share this project with my team\n              </Label>\n            </div>\n          </CardContent>\n          \n          <CardFooter className=\"flex justify-between\">\n            <Button type=\"button\" variant=\"outline\" onClick={handleCancel}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isCreating}>\n              {isCreating && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Create Project\n            </Button>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}\n"],"names":["NewProjectPage","searchParams","useSearchParams","navigate","useNavigate","user","useAuth","aiGenerated","prompt","projectName","setProjectName","useState","projectDescription","setProjectDescription","isShared","setIsShared","isGenerating","setIsGenerating","isCreating","setIsCreating","useEffect","timer","generatedName","word","handleSubmit","e","toast","newProjectId","handleCancel","jsxs","jsx","Loader2","Button","ArrowLeft","Card","CardHeader","CardTitle","CardDescription","CardContent","Label","Input","Textarea","Checkbox","checked","CardFooter"],"mappings":"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"}