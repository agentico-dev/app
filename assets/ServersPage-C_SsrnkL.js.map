{"version":3,"file":"ServersPage-C_SsrnkL.js","sources":["../../src/components/servers/ServerCard.tsx","../../src/components/servers/ServerSkeleton.tsx","../../src/components/servers/EmptyServerState.tsx","../../src/components/servers/ServersList.tsx","../../src/pages/ServersPage.tsx"],"sourcesContent":["\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Server as ServerType } from \"@/types/server\";\nimport { Server, Star, StarIcon } from \"lucide-react\";\nimport { useNavigate } from \"react-router\";\nimport { TagBadge } from \"@/components/applications/TagBadge\";\nimport { Tag } from \"@/types/tag\";\n\ninterface ServerCardProps {\n  server: ServerType;\n  onToggleFavorite: (id: string, favorite: boolean) => Promise<void>;\n  tags: Tag[];\n}\n\nconst statusColors = {\n  'active': 'bg-green-500',\n  'inactive': 'bg-red-500',\n  'maintenance': 'bg-yellow-500',\n  'development': 'bg-blue-500',\n  'deprecated': 'bg-gray-500',\n  'planning': 'bg-purple-500',\n};\n\nexport function ServerCard({ server, onToggleFavorite, tags }: ServerCardProps) {\n  const navigate = useNavigate();\n\n  const handleServerClick = () => {\n    navigate(`/servers/${server.id}`);\n  };\n\n  const handleToggleFavorite = async (e: React.MouseEvent) => {\n    e.stopPropagation();\n    await onToggleFavorite(server.id, server.favorite);\n  };\n\n  return (\n    <Card \n      key={server.id} \n      className=\"overflow-hidden hover:shadow-md transition-shadow cursor-pointer\"\n      onClick={handleServerClick}\n    >\n      <div className=\"relative\">\n        <CardHeader className=\"pb-0\">\n          <div className=\"flex justify-between items-start\">\n            <div className=\"flex items-center\">\n              <div\n                className={`w-3 h-3 rounded-full mr-2 ${\n                  statusColors[server.status.toLowerCase() as keyof typeof statusColors] || 'bg-gray-500'\n                }`}\n              />\n              <CardTitle className=\"text-lg\">{server.name}</CardTitle>\n            </div>\n            <button\n              onClick={handleToggleFavorite}\n              className=\"text-muted-foreground hover:text-yellow-400 transition-colors\"\n              aria-label={server.favorite ? \"Remove from favorites\" : \"Add to favorites\"}\n            >\n              {server.favorite ? (\n                <StarIcon className=\"h-5 w-5 fill-yellow-400 text-yellow-400\" />\n              ) : (\n                <Star className=\"h-5 w-5\" />\n              )}\n            </button>\n          </div>\n          <CardDescription className=\"line-clamp-2\">\n            {server.description || \"No description available\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"pt-4\">\n          <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n            <div className=\"flex items-center mr-4\">\n              <Server className=\"h-4 w-4 mr-1\" />\n              <span>{server.type}</span>\n            </div>\n          </div>\n          <div className=\"flex flex-wrap gap-1 mt-2\">\n            {server.tags.slice(0, 3).map((tagId) => (\n              <TagBadge \n                key={tagId} \n                name={tags.find(tag => tag.id === tagId)?.name || 'Unknown'} \n              />\n            ))}\n            {server.tags.length > 3 && (\n              <span className=\"text-xs text-muted-foreground\">\n                +{server.tags.length - 3} more\n              </span>\n            )}\n          </div>\n        </CardContent>\n        <CardFooter className=\"pt-0 text-xs text-muted-foreground\">\n          Created {new Date(server.created_at).toLocaleDateString()}\n        </CardFooter>\n      </div>\n    </Card>\n  );\n}\n\nexport default ServerCard;\n","\nimport React from 'react';\nimport { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\n\ninterface ServerSkeletonProps {\n  count?: number;\n}\n\nexport function ServerSkeleton({ count = 6 }: ServerSkeletonProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {Array.from({ length: count }).map((_, i) => (\n        <Card key={i} className=\"animate-pulse\">\n          <CardHeader className=\"h-24 bg-muted\" />\n          <CardContent className=\"py-4\">\n            <div className=\"h-5 bg-muted rounded mb-2 w-3/4\" />\n            <div className=\"h-4 bg-muted rounded w-1/2\" />\n          </CardContent>\n          <CardFooter>\n            <div className=\"h-4 bg-muted rounded w-full\" />\n          </CardFooter>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\nexport default ServerSkeleton;\n","\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { PlusCircle, Server } from 'lucide-react';\nimport { useNavigate } from 'react-router';\n\ninterface EmptyServerStateProps {\n  hasServers: boolean;\n  isFiltered: boolean;\n  searchQuery?: string;\n}\n\nexport function EmptyServerState({ hasServers, isFiltered, searchQuery }: EmptyServerStateProps) {\n  const navigate = useNavigate();\n  \n  return (\n    <Card className=\"mt-8\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">No Servers Found</CardTitle>\n        <CardDescription>\n          {hasServers && isFiltered\n            ? \"No servers match your current filters. Try changing your search criteria.\"\n            : \"You haven't created any servers yet. Click 'New Server' to get started.\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col items-center justify-center p-8\">\n        <Server className=\"h-16 w-16 text-muted-foreground mb-4\" />\n        <Button onClick={() => navigate('/servers/new')} className=\"mt-4\">\n          <PlusCircle className=\"mr-2 h-4 w-4\" />\n          Create Your First Server\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default EmptyServerState;\n","\nimport React from 'react';\nimport { Server as ServerType } from '@/types/server';\nimport ServerCard from './ServerCard';\nimport ServerSkeleton from './ServerSkeleton';\nimport EmptyServerState from './EmptyServerState';\nimport { Tag } from '@/types/application';\n\ninterface ServersListProps {\n  servers: ServerType[];\n  filteredServers: ServerType[];\n  isLoading: boolean;\n  toggleFavorite: (id: string, currentState: boolean) => Promise<void>;\n  tags: Tag[];\n  searchValue: string;\n  selectedStatus: string | null;\n  selectedTags: string[];\n}\n\nexport function ServersList({ \n  servers, \n  filteredServers, \n  isLoading, \n  toggleFavorite,\n  tags,\n  searchValue,\n  selectedStatus,\n  selectedTags\n}: ServersListProps) {\n  if (isLoading) {\n    return <ServerSkeleton />;\n  }\n\n  const isFiltered = searchValue !== '' || selectedStatus !== null || selectedTags.length > 0;\n  const hasServers = servers && servers.length > 0;\n\n  if (filteredServers.length === 0) {\n    return <EmptyServerState \n      hasServers={hasServers} \n      isFiltered={isFiltered} \n      searchQuery={searchValue}\n    />;\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      {filteredServers.map((server) => (\n        <ServerCard \n          key={server.id} \n          server={server} \n          onToggleFavorite={toggleFavorite}\n          tags={tags}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default ServersList;\n","import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { PlusCircle } from 'lucide-react';\nimport { useNavigate } from 'react-router';\nimport { useServers } from '@/hooks/servers';\nimport { FilterControls } from '@/components/applications/FilterControls';\nimport { useTags } from '@/contexts/TagsContext';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport ServersList from '@/components/servers/ServersList';\n\nfunction ServersPage() {\n  const navigate = useNavigate();\n  const { servers, isLoading, error, toggleFavorite } = useServers();\n  const { tags, isLoading: tagsLoading } = useTags();\n  const [search, setSearch] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState<string | null>(null);\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  \n  const filteredServers = (servers || []).filter((server) => {\n    const matchesSearch = search === '' || \n      server.name.toLowerCase().includes(search.toLowerCase()) ||\n      (server.description?.toLowerCase().includes(search.toLowerCase()));\n    \n    const matchesStatus = selectedStatus === null || \n      server.status.toLowerCase() === selectedStatus.toLowerCase();\n    \n    const matchesTags = selectedTags.length === 0 || \n      selectedTags.every(tag => server.tags.includes(tag));\n    \n    return matchesSearch && matchesStatus && matchesTags;\n  });\n\n  const handleToggleFavorite = async (id: string, currentState: boolean) => {\n    try {\n      await toggleFavorite.mutateAsync({ id, favorite: !currentState });\n    } catch (error) {\n      console.error('Error toggling favorite:', error);\n    }\n  };\n\n  const statusOptions = [\n    { label: 'All Statuses', value: null },\n    { label: 'Active', value: 'active' },\n    { label: 'Inactive', value: 'inactive' },\n    { label: 'Maintenance', value: 'maintenance' },\n    { label: 'Development', value: 'development' },\n    { label: 'Deprecated', value: 'deprecated' },\n    { label: 'Planning', value: 'planning' },\n  ];\n\n  if (error) {\n    return (\n      <div className=\"container py-8\">\n        <Card className=\"border-destructive\">\n          <CardHeader>\n            <CardTitle className=\"text-destructive\">Error Loading Servers</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>There was an error loading the servers. Please try again later.</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">{error.message}</p>\n          </CardContent>\n          <CardFooter>\n            <Button onClick={() => window.location.reload()}>Retry</Button>\n          </CardFooter>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container py-8\">\n      <div className=\"flex justify-between items-center mb-8\">\n        <h1 className=\"text-3xl font-bold tracking-tight bg-gradient-to-r from-primary to-accent-500 bg-clip-text text-transparent\">Servers</h1>\n        <Button onClick={() => navigate('/servers/new')}>\n          <PlusCircle className=\"mr-2 h-4 w-4\" />\n          New Server\n        </Button>\n      </div>\n\n      <FilterControls\n        searchValue={search}\n        onSearchValueChange={setSearch}\n        statusOptions={statusOptions}\n        selectedStatus={selectedStatus}\n        onStatusChange={setSelectedStatus}\n        tags={tags}\n        selectedTags={selectedTags}\n        onTagsChange={setSelectedTags}\n      />\n\n      <ServersList \n        servers={servers || []}\n        filteredServers={filteredServers}\n        isLoading={isLoading || tagsLoading}\n        toggleFavorite={handleToggleFavorite}\n        tags={tags}\n        searchValue={search}\n        selectedStatus={selectedStatus}\n        selectedTags={selectedTags}\n      />\n    </div>\n  );\n}\n\nexport default ServersPage;\n"],"names":["statusColors","ServerCard","server","onToggleFavorite","tags","navigate","useNavigate","handleServerClick","handleToggleFavorite","e","jsx","Card","jsxs","CardHeader","CardTitle","StarIcon","Star","CardDescription","CardContent","Server","tagId","TagBadge","_a","tag","CardFooter","ServerSkeleton","count","_","i","EmptyServerState","hasServers","isFiltered","searchQuery","Button","PlusCircle","ServersList","servers","filteredServers","isLoading","toggleFavorite","searchValue","selectedStatus","selectedTags","ServersPage","error","useServers","tagsLoading","useTags","search","setSearch","useState","setSelectedStatus","setSelectedTags","matchesSearch","matchesStatus","matchesTags","id","currentState","statusOptions","FilterControls"],"mappings":"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"}