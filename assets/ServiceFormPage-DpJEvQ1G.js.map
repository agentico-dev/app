{"version":3,"file":"ServiceFormPage-DpJEvQ1G.js","sources":["../../src/pages/applications/service/ServiceFormPage.tsx"],"sourcesContent":["\nimport { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router';\nimport { useForm } from 'react-hook-form';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowLeft } from 'lucide-react';\nimport { useApplicationService, useApplicationServices } from '@/hooks/useApplicationServices';\nimport { ApplicationService } from '@/types/application';\nimport { toast } from 'sonner';\n\nexport default function ServiceFormPage() {\n  const { applicationId, serviceId } = useParams<{ applicationId: string; serviceId?: string }>();\n  const navigate = useNavigate();\n  const isNew = !serviceId;\n  \n  const { data: service, isLoading: isLoadingService } = useApplicationService(serviceId);\n  const { createService, updateService } = useApplicationServices(applicationId);\n  \n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const form = useForm<Partial<ApplicationService>>({\n    defaultValues: {\n      name: '',\n      description: '',\n      status: 'active',\n      service_type: '',\n      tags: [],\n    },\n  });\n\n  useEffect(() => {\n    if (service && !isNew) {\n      form.reset({\n        name: service.name,\n        description: service.description,\n        status: service.status,\n        service_type: service.service_type,\n        tags: service.tags,\n      });\n    }\n  }, [service, form, isNew]);\n\n  const onSubmit = async (data: Partial<ApplicationService>) => {\n    if (!applicationId) return;\n    \n    setIsSubmitting(true);\n    try {\n      if (isNew) {\n        await createService.mutateAsync({\n          ...data,\n          application_id: applicationId,\n        });\n        toast.success('Service created successfully');\n      } else if (serviceId) {\n        await updateService.mutateAsync({\n          ...data,\n          id: serviceId,\n        });\n        toast.success('Service updated successfully');\n      }\n      navigate(`/applications/${applicationId}`);\n    } catch (error) {\n      console.error('Error saving service:', error);\n      toast.error('Failed to save service');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"container py-6 space-y-6\">\n      <Button variant=\"ghost\" asChild>\n        <div onClick={() => navigate(`/applications/${applicationId}`)}>\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back to Application\n        </div>\n      </Button>\n      \n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">\n          {isNew ? 'Create New Service' : 'Edit Service'}\n        </h1>\n        <p className=\"text-muted-foreground\">\n          {isNew ? 'Define a new service for your application' : 'Update the service details'}\n        </p>\n      </div>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Service Details</CardTitle>\n          <CardDescription>\n            Fill in the details of your service\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Service Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter service name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Describe your service\"\n                        className=\"min-h-[120px]\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Provide a brief description of what this service does.\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\n                          <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        The current status of this service.\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"service_type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Service Type</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Microservice, Database, AI\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        The type of this service.\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"tags\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tags</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter tags separated by commas\"\n                        value={field.value?.join(', ') || ''}\n                        onChange={(e) => {\n                          const tags = e.target.value\n                            .split(',')\n                            .map((tag) => tag.trim())\n                            .filter(Boolean);\n                          field.onChange(tags);\n                        }}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Tags help categorize and find your services.\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"flex justify-end space-x-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => navigate(`/applications/${applicationId}`)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting\n                    ? isNew\n                      ? 'Creating...'\n                      : 'Updating...'\n                    : isNew\n                    ? 'Create Service'\n                    : 'Update Service'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"names":["ServiceFormPage","applicationId","serviceId","useParams","navigate","useNavigate","isNew","service","isLoadingService","useApplicationService","createService","updateService","useApplicationServices","isSubmitting","setIsSubmitting","useState","form","useForm","useEffect","onSubmit","data","toast","error","jsxs","jsx","Button","ArrowLeft","Card","CardHeader","CardTitle","CardDescription","CardContent","Form","FormField","field","FormItem","FormLabel","FormControl","Input","FormMessage","Textarea","FormDescription","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","_a","e","tags","tag"],"mappings":"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"}