{"version":3,"file":"ServerDetailPage-GoGSSGtY.js","sources":["../../src/components/servers/detail/ServerResourceCards.tsx","../../src/components/servers/detail/ServerTabs.tsx","../../src/pages/servers/ServerDetailPage.tsx"],"sourcesContent":["\nimport { CircuitBoard, AppWindow, Server as ServerIcon, Calendar, Tag } from 'lucide-react';\nimport { ResourceInfoCards } from '../../detail/ResourceInfoCards';\nimport { format } from 'date-fns';\nimport { Server } from '@/types/server';\n\ninterface ServerResourceCardsProps {\n  server: Server;\n}\n\nexport function ServerResourceCards({ server }: ServerResourceCardsProps) {\n  return (\n    <ResourceInfoCards \n      cards={[\n        {\n          title: 'Resources',\n          items: [\n            {\n              icon: <CircuitBoard className=\"h-4 w-4 mr-2 text-muted-foreground\" />,\n              label: 'AI Tools',\n              value: 0,\n            },\n            {\n              icon: <AppWindow className=\"h-4 w-4 mr-2 text-muted-foreground\" />,\n              label: 'Applications',\n              value: 0,\n            },\n          ],\n        },\n        {\n          title: 'Server Details',\n          items: [\n            {\n              icon: <ServerIcon className=\"h-4 w-4 mr-2 text-muted-foreground\" />,\n              label: 'Type:',\n              value: server.type,\n            },\n            {\n              icon: <Tag className=\"h-4 w-4 mr-2 text-muted-foreground\" />,\n              label: 'Tags:',\n              value: server.tags.length,\n            },\n          ],\n        },\n        {\n          title: 'Timeline',\n          items: [\n            {\n              icon: <Calendar className=\"h-4 w-4 mr-2 text-muted-foreground\" />,\n              label: 'Created:',\n              value: server.created_at ? format(new Date(server.created_at), 'PPP') : 'Unknown',\n            },\n            {\n              icon: <Calendar className=\"h-4 w-4 mr-2 text-muted-foreground\" />,\n              label: 'Updated:',\n              value: server.updated_at ? format(new Date(server.updated_at), 'PPP') : 'Unknown',\n            },\n          ],\n        },\n      ]}\n    />\n  );\n}\n","\nimport { AppWindow, CircuitBoard } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { ResourceTabs } from '../../detail/ResourceTabs';\nimport { Server } from '@/types/server';\n\ninterface ServerTabsProps {\n  server: Server;\n}\n\nexport function ServerTabs({ server }: ServerTabsProps) {\n  return (\n    <ResourceTabs\n      defaultTab=\"ai-tools\"\n      tabs={[\n        {\n          value: 'overview',\n          label: 'Overview',\n          description: 'Detailed information about this server',\n          content: (\n            <p className=\"text-muted-foreground\">\n              {server.description || 'No detailed description available for this server.'}\n            </p>\n          ),\n        },\n        {\n          value: 'applications',\n          label: 'Applications',\n          description: 'Applications associated with this server',\n          content: (\n            <div className=\"text-center p-6\">\n              <AppWindow className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No Applications</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                There are no applications associated with this server yet.\n              </p>\n              <Button>Deploy Application</Button>\n            </div>\n          ),\n        },\n        {\n          value: 'ai-tools',\n          label: 'AI Tools',\n          description: 'AI tools deployed on this server',\n          content: (\n            <div className=\"text-center p-6\">\n              <CircuitBoard className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No AI Tools</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                There are no AI tools deployed on this server yet.\n              </p>\n              <Button>Deploy AI Tool</Button>\n            </div>\n          ),\n        },\n        {\n          value: 'logs',\n          label: 'Logs',\n          description: 'System logs and monitoring',\n          content: (\n            <div className=\"text-center p-6\">\n              <p className=\"text-muted-foreground\">\n                Log monitoring is not available for this server.\n              </p>\n            </div>\n          ),\n        },\n      ]}\n    />\n  );\n}\n","\nimport { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { DetailPageLayout } from '@/components/detail/DetailPageLayout';\nimport { ResourceHeader } from '@/components/detail/ResourceHeader';\nimport { ServerResourceCards } from '@/components/servers/detail/ServerResourceCards';\nimport { ServerTabs } from '@/components/servers/detail/ServerTabs';\nimport { Server } from '@/types/server';\nimport { useTags } from '@/contexts/TagsContext';\nimport { Badge } from '@/components/ui/badge';\n\nexport default function ServerDetailPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [server, setServer] = useState<Server | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { tags } = useTags();\n\n  useEffect(() => {\n    const fetchServerDetails = async () => {\n      if (!id) return;\n      \n      setIsLoading(true);\n      try {\n        console.log('Fetching server details for ID/slug:', id);\n        \n        let query = supabase.from('servers').select('*');\n        \n        // Check if the ID is a UUID format or a slug\n        const isUuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(id);\n        if (isUuid) {\n          query = query.eq('id', id);\n        } else {\n          query = query.eq('slug', id);\n        }\n        \n        const { data, error } = await query.single();\n        \n        if (error) {\n          console.error('Error fetching server details:', error);\n          toast.error(`Failed to load server: ${error.message}`);\n          throw error;\n        }\n        \n        console.log('Fetched server details:', data);\n        setServer(data as Server);\n      } catch (error) {\n        console.error('Error in server fetch:', error);\n        toast.error('Failed to load server details');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    fetchServerDetails();\n  }, [id]);\n\n  const handleGoBack = () => {\n    navigate(-1);\n  };\n\n  const handleEditServer = () => {\n    // Navigate to edit server page using slug\n    if (server) {\n      navigate(`/servers/${server.slug}/edit`);\n    }\n  };\n\n  const handleDeleteServer = async () => {\n    if (!server) return;\n    \n    try {\n      const { error } = await supabase\n        .from('servers')\n        .delete()\n        .eq('id', server.id);\n      \n      if (error) throw error;\n      \n      toast.success('Server deleted successfully');\n      navigate('/servers');\n    } catch (error: any) {\n      console.error('Error deleting server:', error);\n      toast.error(`Failed to delete server: ${error.message}`);\n    }\n  };\n\n  const getStatusColorClass = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'development': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'maintenance': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'deprecated': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'planning': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300';\n      case 'inactive': return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n    }\n  };\n\n  const renderTagBadges = () => {\n    return server!.tags?.map((tagId) => {\n      const tagName = tags.find(t => t.id === tagId)?.name || 'Unknown';\n      return (\n        <Badge key={tagId} variant=\"secondary\">{tagName}</Badge>\n      );\n    });\n  };\n\n  return (\n    <DetailPageLayout\n      isLoading={isLoading}\n      resource={server}\n      resourceType=\"Server\"\n      onGoBack={handleGoBack}\n      renderResource={() => (\n        <>\n          <ResourceHeader\n            title={server!.name}\n            description={server!.description}\n            isFavorite={server!.favorite}\n            status={server!.status}\n            tags={[\n              <Badge key=\"type\" variant=\"outline\">{server!.type}</Badge>,\n              ...renderTagBadges()\n            ]}\n            statusColorClass={getStatusColorClass(server!.status)}\n            onEdit={handleEditServer}\n            onDelete={handleDeleteServer}\n            resourceId={server!.id}\n            resourceType=\"Server\"\n          />\n          \n          <ServerResourceCards server={server!} />\n          \n          <ServerTabs server={server!} />\n        </>\n      )}\n    />\n  );\n}\n"],"names":["ServerResourceCards","server","jsx","ResourceInfoCards","CircuitBoard","AppWindow","ServerIcon","Tag","Calendar","format","ServerTabs","ResourceTabs","jsxs","Button","ServerDetailPage","id","useParams","navigate","useNavigate","setServer","useState","isLoading","setIsLoading","tags","useTags","useEffect","query","supabase","data","error","toast","handleGoBack","handleEditServer","handleDeleteServer","getStatusColorClass","status","renderTagBadges","_a","tagId","tagName","t","Badge","DetailPageLayout","Fragment","ResourceHeader"],"mappings":"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"}