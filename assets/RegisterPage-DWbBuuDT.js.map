{"version":3,"file":"RegisterPage-DWbBuuDT.js","sources":["../../node_modules/lucide-react/dist/esm/icons/key.js","../../src/components/PlanSelector.tsx","../../src/hooks/usePlans.tsx","../../src/pages/auth/RegisterPage.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Key = createLucideIcon(\"Key\", [\n  [\"path\", { d: \"m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4\", key: \"g0fldk\" }],\n  [\"path\", { d: \"m21 2-9.6 9.6\", key: \"1j0ho8\" }],\n  [\"circle\", { cx: \"7.5\", cy: \"15.5\", r: \"5.5\", key: \"yqb3hr\" }]\n]);\n\nexport { Key as default };\n//# sourceMappingURL=key.js.map\n","\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { type Plan } from \"@/types/plans\";\nimport { Check } from \"lucide-react\";\n\ninterface PlanSelectorProps {\n  plans?: Plan[];\n  selectedPlan: string;\n  selectedPlanId?: string;  // Added for backward compatibility\n  onSelectPlan: (planId: string) => void;\n}\n\nexport default function PlanSelector({ \n  plans = [], \n  selectedPlan, \n  selectedPlanId, \n  onSelectPlan \n}: PlanSelectorProps) {\n  // Use selectedPlanId as a fallback if selectedPlan is not provided\n  const activePlanId = selectedPlan || selectedPlanId || '';\n\n  // If plans array is empty, provide default plans\n  const plansToUse = plans.length > 0 ? plans : [\n    {\n      id: 'free',\n      name: 'Free',\n      description: 'Get started with basic features',\n      price: 0,\n      interval: 'monthly' as const,\n      features: ['5 projects', 'Basic analytics', 'Community support'],\n      active: true\n    },\n    {\n      id: 'pro',\n      name: 'Pro',\n      description: 'For professional developers and teams',\n      price: 0,\n      interval: 'monthly' as const,\n      features: ['Unlimited projects', 'Advanced analytics', 'Priority support', 'Custom integrations'],\n      active: true\n    },\n    {\n      id: 'enterprise',\n      name: 'Enterprise',\n      description: 'For large organizations with complex needs',\n      price: 0,\n      interval: 'monthly' as const,\n      features: ['Unlimited everything', 'Dedicated support', 'Custom development', 'SLA guarantees', 'Enterprise SSO'],\n      active: true\n    }\n  ];\n\n  // Group plans by name to show different intervals\n  const plansByName = plansToUse.reduce((acc, plan) => {\n    if (!acc[plan.name]) {\n      acc[plan.name] = [];\n    }\n    acc[plan.name].push(plan);\n    return acc;\n  }, {} as Record<string, Plan[]>);\n\n  return (\n    <RadioGroup\n      value={activePlanId}\n      onValueChange={onSelectPlan}\n      className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\n    >\n      {Object.entries(plansByName).map(([name, planVariants]) => (\n        <Card\n          key={name}\n          className={`relative cursor-pointer transition-all ${\n            planVariants.some(p => p.id === activePlanId)\n              ? 'border-primary ring-2 ring-primary ring-offset-2'\n              : 'hover:border-primary/50'\n          }`}\n        >\n          <CardContent className=\"p-6\">\n            <RadioGroupItem\n              value={planVariants[0].id}\n              id={name}\n              className=\"absolute right-4 top-4\"\n            />\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold\">{name}</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {planVariants[0].description}\n                </p>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold\">$0</div>\n                <div className=\"text-sm text-muted-foreground\">During beta</div>\n              </div>\n              <ul className=\"space-y-2 text-sm\">\n                {planVariants[0].features.map((feature, i) => (\n                  <li key={i} className=\"flex items-center\">\n                    <Check className=\"h-4 w-4 mr-2 text-primary\" />\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </RadioGroup>\n  );\n}\n","\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport type { Plan } from '@/types/plans';\nimport { useAuth } from './useAuth';\nimport { useToast } from '@/components/ui/use-toast';\n\nexport function usePlans() {\n  const queryClient = useQueryClient();\n  const { session } = useAuth();\n  const { toast } = useToast();\n  \n  const isAuthenticated = !!session.user;\n\n  // Fetch all available plans\n  const { data: plans = [], isLoading, error } = useQuery({\n    queryKey: ['plans'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('plans')\n        .select('*')\n        .order('price');\n      \n      if (error) throw error;\n      return data as Plan[];\n    },\n  });\n\n  // Get current user's plan\n  const { data: currentPlan } = useQuery({\n    queryKey: ['currentPlan', session.user?.id],\n    queryFn: async () => {\n      if (!session.user) return null;\n      \n      // Get user's profile with plan_id\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('plan_id')\n        .eq('id', session.user.id)\n        .single();\n      \n      if (error) throw error;\n      \n      if (!data?.plan_id) return null;\n      \n      // Get the plan details\n      const { data: planData, error: planError } = await supabase\n        .from('plans')\n        .select('*')\n        .eq('id', data.plan_id)\n        .single();\n      \n      if (planError) throw planError;\n      \n      return planData as Plan;\n    },\n    enabled: isAuthenticated,\n  });\n\n  // Update user's plan\n  const updatePlan = useMutation({\n    mutationFn: async (planId: string) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { error } = await supabase\n        .from('profiles')\n        .update({ \n          plan_id: planId,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', session.user.id);\n      \n      if (error) throw error;\n      \n      // Get the updated plan details to return\n      const { data: planData, error: planError } = await supabase\n        .from('plans')\n        .select('*')\n        .eq('id', planId)\n        .single();\n      \n      if (planError) throw planError;\n      \n      return planData as Plan;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['currentPlan'] });\n      toast({\n        title: 'Plan updated',\n        description: 'Your subscription plan has been updated successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating plan',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n  \n  // Cancel subscription\n  const cancelSubscription = useMutation({\n    mutationFn: async () => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      // Set plan_id to null or to a free plan id as appropriate\n      const { error } = await supabase\n        .from('profiles')\n        .update({ \n          plan_id: null, // Or use your free plan ID\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', session.user.id);\n      \n      if (error) throw error;\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['currentPlan'] });\n      toast({\n        title: 'Subscription canceled',\n        description: 'Your subscription has been canceled successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error canceling subscription',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  return {\n    plans,\n    currentPlan,\n    isLoading,\n    error,\n    isAuthenticated,\n    updatePlan,\n    cancelSubscription,\n  };\n}\n","\nimport { useState } from 'react';\nimport { useNavigate, Link } from 'react-router';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useAuth } from '@/hooks/useAuth';\nimport { AlertCircle, ArrowLeft, ArrowRight, Key, User } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { z } from 'zod';\nimport PlanSelector from '@/components/PlanSelector';\nimport { Plan } from '@/types/plans';\nimport { usePlans } from '@/hooks/usePlans';\n\nconst userSchema = z.object({\n  fullName: z.string().min(2, 'Name must be at least 2 characters'),\n  email: z.string().email('Please enter a valid email'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\nexport default function RegisterPage() {\n  const [step, setStep] = useState(1);\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [planId, setPlanId] = useState('free');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { signUp } = useAuth();\n  const { plans } = usePlans();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const validatedData = userSchema.parse({ fullName, email, password });\n      \n      const { error } = await signUp(\n        validatedData.email, \n        validatedData.password, \n        { full_name: validatedData.fullName, plan_id: planId }\n      );\n      \n      if (error) throw error;\n\n      toast({\n        title: \"Registration successful\",\n        description: \"Your account has been created and you are now logged in.\",\n      });\n      \n      navigate('/');\n    } catch (err: any) {\n      console.error('Registration error:', err);\n      \n      if (err instanceof z.ZodError) {\n        setError(err.errors[0].message);\n      } else {\n        setError(err.message || 'Failed to register');\n      }\n      \n      toast({\n        title: \"Registration failed\",\n        description: err.message || \"There was a problem creating your account.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const nextStep = () => {\n    try {\n      if (step === 1) {\n        userSchema.parse({ fullName, email, password });\n        setStep(2);\n      }\n    } catch (err: any) {\n      if (err instanceof z.ZodError) {\n        setError(err.errors[0].message);\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-muted/40 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl text-center\">Create an account</CardTitle>\n          <CardDescription className=\"text-center\">\n            {step === 1 ? 'Enter your details to create an account' : 'Choose your plan (all free during beta)'}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          {step === 1 ? (\n            <form className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\">Full Name</Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                  <Input\n                    id=\"fullName\"\n                    placeholder=\"John Doe\"\n                    value={fullName}\n                    onChange={(e) => setFullName(e.target.value)}\n                    className=\"pl-9\"\n                    required\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"you@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Key className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"pl-9\"\n                    required\n                  />\n                </div>\n              </div>\n              \n              <Button type=\"button\" onClick={nextStep} className=\"w-full\">\n                Continue <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </form>\n          ) : (\n            <div className=\"space-y-6\">\n              <PlanSelector \n                plans={plans}\n                selectedPlan={planId}\n                onSelectPlan={setPlanId}\n              />\n              \n              <div className=\"flex space-x-4\">\n                <Button \n                  variant=\"outline\" \n                  type=\"button\" \n                  onClick={() => setStep(1)}\n                  className=\"flex-1\"\n                >\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back\n                </Button>\n                <Button \n                  type=\"button\" \n                  onClick={handleSignUp}\n                  className=\"flex-1\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? 'Creating Account...' : 'Create Account'}\n                </Button>\n              </div>\n            </div>\n          )}\n          \n        </CardContent>\n        <CardFooter className=\"flex flex-col space-y-4\">\n          <div className=\"text-center text-sm text-muted-foreground\">\n            Already have an account?{' '}\n            <Link to=\"/login\" className=\"text-primary hover:underline\">\n              Sign in\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n"],"names":["Key","createLucideIcon","PlanSelector","plans","selectedPlan","selectedPlanId","onSelectPlan","activePlanId","plansByName","acc","plan","jsx","RadioGroup","name","planVariants","Card","jsxs","CardContent","RadioGroupItem","feature","i","Check","usePlans","queryClient","useQueryClient","session","useAuth","toast","useToast","isAuthenticated","isLoading","error","useQuery","data","supabase","currentPlan","_a","planData","planError","updatePlan","useMutation","planId","cancelSubscription","userSchema","z","RegisterPage","step","setStep","useState","fullName","setFullName","email","setEmail","password","setPassword","setPlanId","setIsLoading","setError","signUp","navigate","useNavigate","handleSignUp","e","validatedData","err","nextStep","CardHeader","CardTitle","CardDescription","Alert","AlertCircle","AlertDescription","Label","User","Input","Button","ArrowRight","ArrowLeft","CardFooter","Link"],"mappings":"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","x_google_ignoreList":[0]}