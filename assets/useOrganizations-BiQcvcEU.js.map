{"version":3,"file":"useOrganizations-BiQcvcEU.js","sources":["../../src/hooks/useOrganizationQueries.ts","../../src/hooks/useOrganizationMutations.ts","../../src/hooks/useOrganizations.tsx"],"sourcesContent":["\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from './useAuth';\nimport { Organization, OrganizationMember } from '@/types/organization';\nimport { apiTable, getGlobalOrganization } from '@/utils/supabaseHelpers';\n\nexport function useOrganizationsQuery() {\n  return useQuery({\n    queryKey: ['organizations'],\n    queryFn: async () => {\n      const { data, error } = await apiTable('organizations')\n        .select('*')\n        .order('name');\n      \n      if (error) throw error;\n      \n      // Map the data to ensure it matches Organization type\n      const orgData = data.map((org: any): Organization => ({\n        id: org.id,\n        name: org.name,\n        slug: org.slug || '',\n        description: org.description || '',\n        logo_url: org.logo_url,\n        created_at: org.created_at,\n        updated_at: org.updated_at,\n        is_global: !!org.is_global\n      }));\n      \n      return orgData;\n    },\n  });\n}\n\nexport function useUserOrganizationsQuery(userId?: string) {\n  return useQuery({\n    queryKey: ['userOrganizations', userId],\n    queryFn: async () => {\n      // Always considered: global organization\n      const globalOrg = await getGlobalOrganization();\n      if (!userId) {\n        // Return just the global organization for non-authenticated users\n        return globalOrg ? [{ ...globalOrg, role: 'member' }] : [];\n      }\n      \n      // Get user's organization memberships\n      const { data: memberData, error: memberError } = await apiTable('organization_members')\n        .select(`\n          role,\n          organization_id\n        `)\n        .eq('user_id', userId);\n      \n      if (memberError) throw memberError;\n      \n      if (!memberData || memberData.length === 0) {\n        // If user has no explicit memberships, still include global org\n        return globalOrg ? [{ ...globalOrg, role: 'member' }] : [];\n      }\n      \n      // Get all organizations the user is a member of\n      const orgIds = memberData.map((item: any) => item.organization_id);\n      const { data: orgsData, error: orgsError } = await apiTable('organizations')\n        .select('*')\n        .in('id', orgIds);\n        \n      if (orgsError) throw orgsError;      \n      \n      let userOrgs: (Organization & { role: string })[] = orgsData.map((org: any) => {\n        const memberInfo = memberData.find((item: any) => item.organization_id === org.id);\n        \n        // Create strongly typed Organization object\n        const typedOrg: Organization & { role: string } = {\n          id: org.id,\n          name: org.name,\n          slug: org.slug || '',\n          description: org.description || '',\n          logo_url: org.logo_url,\n          created_at: org.created_at,\n          updated_at: org.updated_at,\n          role: memberInfo?.role || 'member',\n          is_global: !!org.is_global\n        };\n        \n        return typedOrg;\n      });\n      \n      // Add global org if not already in the list\n      if (globalOrg && !userOrgs.some(org => org.id === globalOrg.id)) {\n        userOrgs.push({\n          ...globalOrg,\n          role: 'member'\n        });\n      }\n      \n      return userOrgs;\n    },\n    enabled: true, // Always fetch, even for anonymous users\n  });\n}\n\nexport function useOrganizationMembersQuery(organizationId?: string) {\n  return useQuery({\n    queryKey: ['organization-members', organizationId],\n    queryFn: async () => {\n      if (!organizationId) return [];\n      \n      const { data, error } = await apiTable('organization_members')\n        .select('*')\n        .eq('organization_id', organizationId);\n      \n      if (error) throw error;\n      \n      const typedMembers: OrganizationMember[] = data.map((member: any): OrganizationMember => ({\n        id: member.id,\n        organization_id: member.organization_id,\n        user_id: member.user_id,\n        role: member.role,\n        created_at: member.created_at\n      }));\n      \n      return typedMembers;\n    },\n    enabled: !!organizationId,\n  });\n}\n","\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Organization } from '@/types/organization';\nimport { useToast } from '@/components/ui/use-toast';\nimport { useAuth } from './useAuth';\nimport { apiTable } from '@/utils/supabaseHelpers';\nimport { AddMemberParams } from '@/types/organizationHooks';\n\nexport function useCreateOrganizationMutation() {\n  const queryClient = useQueryClient();\n  const { session } = useAuth();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (orgData: Partial<Organization>) => {\n      console.log('Starting organization creation in mutation...', orgData);\n      if (!session.user) throw new Error('Authentication required');\n      \n      // Create the organization with a simplified payload\n      const { data: org, error: orgError } = await apiTable('organizations')\n        .insert({\n          name: orgData.name || '',\n          slug: orgData.slug || orgData.name?.toLowerCase().replace(/\\s+/g, '-') || '',\n          description: orgData.description || null,\n          logo_url: orgData.logo_url || null\n        })\n        .select()\n        .single();\n      \n      console.log('Organization creation completed:', org);\n      \n      if (orgError) throw orgError;\n      if (!org) throw new Error('Failed to create organization');\n      \n      console.log('Adding current user as owner...');\n      // Add current user as owner\n      const { error: memberError } = await apiTable('organization_members')\n        .insert({\n          organization_id: org.id,\n          user_id: session.user.id,\n          role: 'owner'\n        });\n      \n      console.log('Member added:', memberError);\n      \n      if (memberError) throw memberError;\n      \n      // Return a properly typed Organization object\n      const typedOrg: Organization = {\n        id: org.id,\n        name: org.name,\n        slug: org.slug || '',\n        description: org.description || '',\n        logo_url: org.logo_url,\n        created_at: org.created_at,\n        updated_at: org.updated_at\n      };\n      \n      return typedOrg;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['organizations'] });\n      queryClient.invalidateQueries({ queryKey: ['userOrganizations'] });\n      toast({\n        title: 'Organization created',\n        description: 'Your new organization has been created successfully.',\n      });\n    },\n    onError: (error: Error) => {\n      console.error('Error in createOrganization mutation:', error);\n      toast({\n        title: 'Error creating organization',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\nexport function useAddMemberMutation(organizationId?: string) {\n  const queryClient = useQueryClient();\n  const { session } = useAuth();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ email, role }: AddMemberParams) => {\n      if (!session.user) throw new Error('Authentication required');\n      if (!organizationId) throw new Error('Organization ID is required');\n      \n      // First, get the user ID from the email\n      const { data: userData, error: userError } = await apiTable('users')\n        .select('id')\n        .eq('email', email)\n        .single();\n      \n      if (userError) throw new Error('User not found');\n      if (!userData) throw new Error('User not found');\n      \n      // Then add the member\n      const { data, error } = await apiTable('organization_members')\n        .insert({\n          organization_id: organizationId,\n          user_id: userData.id,\n          role: role\n        })\n        .select();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['organization-members'] });\n      toast({\n        title: 'Member added',\n        description: 'The member has been added to the organization.',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error adding member',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n}\n","\nimport { useAuth } from './useAuth';\nimport { \n  useOrganizationsQuery, \n  useUserOrganizationsQuery, \n  useOrganizationMembersQuery \n} from './useOrganizationQueries';\nimport { \n  useCreateOrganizationMutation, \n  useAddMemberMutation \n} from './useOrganizationMutations';\nimport { \n  UseOrganizationsResult, \n  UseOrganizationMembersResult \n} from '@/types/organizationHooks';\n\nexport function useOrganizations(): UseOrganizationsResult {\n  const { session } = useAuth();\n  const isAuthenticated = !!session.user;\n  \n  const { data: organizations, isLoading, error } = useOrganizationsQuery();\n  \n  const { data: userOrganizations } = useUserOrganizationsQuery(session.user?.id);\n  \n  const createOrganization = useCreateOrganizationMutation();\n\n  return {\n    organizations,\n    userOrganizations,\n    isLoading,\n    error,\n    isAuthenticated,\n    createOrganization,\n  };\n}\n\nexport function useOrganizationMembers(organizationId?: string): UseOrganizationMembersResult {\n  const { session } = useAuth();\n  const isAuthenticated = !!session.user;\n  \n  const { data: members, isLoading, error } = useOrganizationMembersQuery(organizationId);\n  \n  const addMember = useAddMemberMutation(organizationId);\n\n  return {\n    members,\n    isLoading,\n    error,\n    isAuthenticated,\n    addMember,\n  };\n}\n"],"names":["useOrganizationsQuery","useQuery","data","error","apiTable","org","useUserOrganizationsQuery","userId","globalOrg","getGlobalOrganization","memberData","memberError","orgIds","item","orgsData","orgsError","userOrgs","memberInfo","useOrganizationMembersQuery","organizationId","member","useCreateOrganizationMutation","queryClient","useQueryClient","session","useAuth","toast","useToast","useMutation","orgData","orgError","_a","useAddMemberMutation","email","role","userData","userError","useOrganizations","isAuthenticated","organizations","isLoading","userOrganizations","createOrganization","useOrganizationMembers","members","addMember"],"mappings":"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"}