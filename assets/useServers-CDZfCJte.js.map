{"version":3,"file":"useServers-CDZfCJte.js","sources":["../../src/hooks/servers/useServers.tsx"],"sourcesContent":["\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '../useAuth';\nimport { useToast } from '@/components/ui/use-toast';\nimport type { Server } from '@/types/server';\n\nexport function useServers() {\n  const { session } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const isAuthenticated = !!session.user;\n\n  // Fetch all servers\n  const { data: servers, isLoading, error } = useQuery({\n    queryKey: ['servers'],\n    queryFn: async () => {\n      let query = supabase\n        .from('servers')\n        .select('*')\n        .order('created_at', { ascending: false });\n      \n      const { data, error } = await query;\n      \n      if (error) throw error;\n      return data as Server[];\n    },\n  });\n\n  // Create a new server\n  const createServer = useMutation({\n    mutationFn: async (serverData: Partial<Server>) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { data, error } = await supabase\n        .from('servers')\n        .insert({\n          name: serverData.name,\n          description: serverData.description,\n          type: serverData.type || 'Standard',\n          status: serverData.status || 'development',\n          organization_id: serverData.organization_id,\n          user_id: session.user.id,\n          tags: serverData.tags || [],\n        })\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['servers'] });\n      toast({\n        title: 'Server created',\n        description: 'Your new server has been created successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating server',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update a server\n  const updateServer = useMutation({\n    mutationFn: async ({ id, ...data }: Partial<Server> & { id: string }) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { data: updatedServer, error } = await supabase\n        .from('servers')\n        .update({\n          name: data.name,\n          description: data.description,\n          type: data.type,\n          status: data.status,\n          tags: data.tags,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', id)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return updatedServer;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['servers'] });\n      toast({\n        title: 'Server updated',\n        description: 'The server has been updated successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating server',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete a server\n  const deleteServer = useMutation({\n    mutationFn: async (id: string) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { error } = await supabase\n        .from('servers')\n        .delete()\n        .eq('id', id);\n      \n      if (error) throw error;\n      return id;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['servers'] });\n      toast({\n        title: 'Server deleted',\n        description: 'The server has been deleted successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error deleting server',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Toggle favorite status\n  const toggleFavorite = useMutation({\n    mutationFn: async ({ id, favorite }: { id: string; favorite: boolean }) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { data, error } = await supabase\n        .from('servers')\n        .update({ favorite })\n        .eq('id', id)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['servers'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating favorite status',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  return {\n    servers,\n    isLoading,\n    error,\n    isAuthenticated,\n    createServer,\n    updateServer,\n    deleteServer,\n    toggleFavorite,\n  };\n}\n"],"names":["useServers","session","useAuth","toast","useToast","queryClient","useQueryClient","isAuthenticated","servers","isLoading","error","useQuery","query","supabase","data","createServer","useMutation","serverData","updateServer","id","updatedServer","deleteServer","toggleFavorite","favorite"],"mappings":"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"}