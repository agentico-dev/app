{"version":3,"file":"useApplicationMessages-Co2tt95Y.js","sources":["../../src/hooks/useApplicationMessages.tsx"],"sourcesContent":["\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from './useAuth';\nimport { useToast } from '@/components/ui/use-toast';\nimport type { ApplicationMessage } from '@/types/application';\n\nexport function useApplicationMessages(applicationId?: string, apiId?: string) {\n  const { session } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const isAuthenticated = !!session.user;\n\n  // Fetch all messages for an application/api or all applications\n  const { data: messages, isLoading, error } = useQuery({\n    queryKey: ['application-messages', applicationId, apiId],\n    queryFn: async () => {\n      if (!session.user) return [];\n      \n      let query = supabase\n        .from('application_messages')\n        .select('*');\n      \n      // Apply filters based on what IDs we have\n      if (apiId) {\n        query = query.eq('api_id', apiId);\n      } else if (applicationId) {\n        query = query.eq('application_id', applicationId);\n      }\n      \n      const { data, error } = await query.order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      return data as ApplicationMessage[];\n    },\n    enabled: !!session.user,\n  });\n\n  // Create a new message\n  const createMessage = useMutation({\n    mutationFn: async (messageData: Partial<ApplicationMessage>) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { data, error } = await supabase\n        .from('application_messages')\n        .insert({\n          title: messageData.title,\n          content: messageData.content,\n          application_id: messageData.application_id,\n          api_id: messageData.api_id,\n          message_type: messageData.message_type || 'notification',\n          status: messageData.status || 'unread',\n        })\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: (_, variables) => {\n      // Invalidate both application and API queries\n      if (variables.application_id) {\n        queryClient.invalidateQueries({ queryKey: ['application-messages', variables.application_id] });\n      }\n      if (variables.api_id) {\n        queryClient.invalidateQueries({ queryKey: ['application-messages', applicationId, variables.api_id] });\n      }\n      queryClient.invalidateQueries({ queryKey: ['application-messages'] });\n      toast({\n        title: 'Message created',\n        description: 'The message has been created successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating message',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update a message\n  const updateMessage = useMutation({\n    mutationFn: async ({ id, ...data }: Partial<ApplicationMessage> & { id: string }) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { data: updatedMessage, error } = await supabase\n        .from('application_messages')\n        .update({\n          title: data.title,\n          content: data.content,\n          message_type: data.message_type,\n          api_id: data.api_id,\n          status: data.status,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', id)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return updatedMessage;\n    },\n    onSuccess: (data) => {\n      // Invalidate both application and API queries\n      if (data.application_id) {\n        queryClient.invalidateQueries({ queryKey: ['application-messages', data.application_id] });\n      }\n      if (data.api_id) {\n        queryClient.invalidateQueries({ queryKey: ['application-messages', applicationId, data.api_id] });\n      }\n      queryClient.invalidateQueries({ queryKey: ['application-messages'] });\n      toast({\n        title: 'Message updated',\n        description: 'The message has been updated successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating message',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete a message\n  const deleteMessage = useMutation({\n    mutationFn: async (id: string) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { error } = await supabase\n        .from('application_messages')\n        .delete()\n        .eq('id', id);\n      \n      if (error) throw error;\n      return id;\n    },\n    onSuccess: (_, variables) => {\n      // Invalidate both application and API queries\n      if (applicationId) {\n        queryClient.invalidateQueries({ queryKey: ['application-messages', applicationId] });\n      }\n      if (apiId) {\n        queryClient.invalidateQueries({ queryKey: ['application-messages', applicationId, apiId] });\n      }\n      queryClient.invalidateQueries({ queryKey: ['application-messages'] });\n      toast({\n        title: 'Message deleted',\n        description: 'The message has been deleted successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error deleting message',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Mark message as read\n  const markAsRead = useMutation({\n    mutationFn: async (id: string) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { data, error } = await supabase\n        .from('application_messages')\n        .update({ status: 'read' })\n        .eq('id', id)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: (data) => {\n      // Invalidate both application and API queries\n      if (data.application_id) {\n        queryClient.invalidateQueries({ queryKey: ['application-messages', data.application_id] });\n      }\n      if (data.api_id) {\n        queryClient.invalidateQueries({ queryKey: ['application-messages', applicationId, data.api_id] });\n      }\n      queryClient.invalidateQueries({ queryKey: ['application-messages'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating message status',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  return {\n    messages,\n    isLoading,\n    error,\n    isAuthenticated,\n    createMessage,\n    updateMessage,\n    deleteMessage,\n    markAsRead,\n  };\n}\n\n// Get a single message by ID\nexport function useApplicationMessage(id?: string) {\n  const { session } = useAuth();\n  \n  return useQuery({\n    queryKey: ['application-message', id],\n    queryFn: async () => {\n      if (!id) return null;\n      \n      const { data, error } = await supabase\n        .from('application_messages')\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (error) throw error;\n      return data as ApplicationMessage;\n    },\n    enabled: !!id && !!session?.user,\n  });\n}\n"],"names":["useApplicationMessages","applicationId","apiId","session","useAuth","toast","useToast","queryClient","useQueryClient","isAuthenticated","messages","isLoading","error","useQuery","query","supabase","data","createMessage","useMutation","messageData","_","variables","updateMessage","id","updatedMessage","deleteMessage","markAsRead","useApplicationMessage"],"mappings":"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"}