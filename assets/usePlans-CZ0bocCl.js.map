{"version":3,"file":"usePlans-CZ0bocCl.js","sources":["../../src/components/PlanSelector.tsx","../../src/hooks/usePlans.tsx"],"sourcesContent":["\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { type Plan } from \"@/types/plans\";\nimport { Check } from \"lucide-react\";\n\ninterface PlanSelectorProps {\n  plans?: Plan[];\n  selectedPlan: string;\n  selectedPlanId?: string;  // Added for backward compatibility\n  onSelectPlan: (planId: string) => void;\n}\n\nexport default function PlanSelector({ \n  plans = [], \n  selectedPlan, \n  selectedPlanId, \n  onSelectPlan \n}: PlanSelectorProps) {\n  // Use selectedPlanId as a fallback if selectedPlan is not provided\n  const activePlanId = selectedPlan || selectedPlanId || '';\n\n  // If plans array is empty, provide default plans\n  const plansToUse = plans.length > 0 ? plans : [\n    {\n      id: 'free',\n      name: 'Free',\n      description: 'Get started with basic features',\n      price: 0,\n      interval: 'monthly' as const,\n      features: ['5 projects', 'Basic analytics', 'Community support'],\n      active: true\n    },\n    {\n      id: 'pro',\n      name: 'Pro',\n      description: 'For professional developers and teams',\n      price: 0,\n      interval: 'monthly' as const,\n      features: ['Unlimited projects', 'Advanced analytics', 'Priority support', 'Custom integrations'],\n      active: true\n    },\n    {\n      id: 'enterprise',\n      name: 'Enterprise',\n      description: 'For large organizations with complex needs',\n      price: 0,\n      interval: 'monthly' as const,\n      features: ['Unlimited everything', 'Dedicated support', 'Custom development', 'SLA guarantees', 'Enterprise SSO'],\n      active: true\n    }\n  ];\n\n  // Group plans by name to show different intervals\n  const plansByName = plansToUse.reduce((acc, plan) => {\n    if (!acc[plan.name]) {\n      acc[plan.name] = [];\n    }\n    acc[plan.name].push(plan);\n    return acc;\n  }, {} as Record<string, Plan[]>);\n\n  return (\n    <RadioGroup\n      value={activePlanId}\n      onValueChange={onSelectPlan}\n      className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\n    >\n      {Object.entries(plansByName).map(([name, planVariants]) => (\n        <Card\n          key={name}\n          className={`relative cursor-pointer transition-all ${\n            planVariants.some(p => p.id === activePlanId)\n              ? 'border-primary ring-2 ring-primary ring-offset-2'\n              : 'hover:border-primary/50'\n          }`}\n        >\n          <CardContent className=\"p-6\">\n            <RadioGroupItem\n              value={planVariants[0].id}\n              id={name}\n              className=\"absolute right-4 top-4\"\n            />\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold\">{name}</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {planVariants[0].description}\n                </p>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold\">$0</div>\n                <div className=\"text-sm text-muted-foreground\">During beta</div>\n              </div>\n              <ul className=\"space-y-2 text-sm\">\n                {planVariants[0].features.map((feature, i) => (\n                  <li key={i} className=\"flex items-center\">\n                    <Check className=\"h-4 w-4 mr-2 text-primary\" />\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </RadioGroup>\n  );\n}\n","\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport type { Plan } from '@/types/plans';\nimport { useAuth } from './useAuth';\nimport { useToast } from '@/components/ui/use-toast';\n\nexport function usePlans() {\n  const queryClient = useQueryClient();\n  const { session } = useAuth();\n  const { toast } = useToast();\n  \n  const isAuthenticated = !!session.user;\n\n  // Fetch all available plans\n  const { data: plans = [], isLoading, error } = useQuery({\n    queryKey: ['plans'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('plans')\n        .select('*')\n        .order('price');\n      \n      if (error) throw error;\n      return data as Plan[];\n    },\n  });\n\n  // Get current user's plan\n  const { data: currentPlan } = useQuery({\n    queryKey: ['currentPlan', session.user?.id],\n    queryFn: async () => {\n      if (!session.user) return null;\n      \n      // Get user's profile with plan_id\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('plan_id')\n        .eq('id', session.user.id)\n        .single();\n      \n      if (error) throw error;\n      \n      if (!data?.plan_id) return null;\n      \n      // Get the plan details\n      const { data: planData, error: planError } = await supabase\n        .from('plans')\n        .select('*')\n        .eq('id', data.plan_id)\n        .single();\n      \n      if (planError) throw planError;\n      \n      return planData as Plan;\n    },\n    enabled: isAuthenticated,\n  });\n\n  // Update user's plan\n  const updatePlan = useMutation({\n    mutationFn: async (planId: string) => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      const { error } = await supabase\n        .from('profiles')\n        .update({ \n          plan_id: planId,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', session.user.id);\n      \n      if (error) throw error;\n      \n      // Get the updated plan details to return\n      const { data: planData, error: planError } = await supabase\n        .from('plans')\n        .select('*')\n        .eq('id', planId)\n        .single();\n      \n      if (planError) throw planError;\n      \n      return planData as Plan;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['currentPlan'] });\n      toast({\n        title: 'Plan updated',\n        description: 'Your subscription plan has been updated successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating plan',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n  \n  // Cancel subscription\n  const cancelSubscription = useMutation({\n    mutationFn: async () => {\n      if (!session.user) throw new Error('Authentication required');\n      \n      // Set plan_id to null or to a free plan id as appropriate\n      const { error } = await supabase\n        .from('profiles')\n        .update({ \n          plan_id: null, // Or use your free plan ID\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', session.user.id);\n      \n      if (error) throw error;\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['currentPlan'] });\n      toast({\n        title: 'Subscription canceled',\n        description: 'Your subscription has been canceled successfully.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error canceling subscription',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  return {\n    plans,\n    currentPlan,\n    isLoading,\n    error,\n    isAuthenticated,\n    updatePlan,\n    cancelSubscription,\n  };\n}\n"],"names":["PlanSelector","plans","selectedPlan","selectedPlanId","onSelectPlan","activePlanId","plansByName","acc","plan","jsx","RadioGroup","name","planVariants","Card","p","jsxs","CardContent","RadioGroupItem","feature","i","Check","usePlans","queryClient","useQueryClient","session","useAuth","toast","useToast","isAuthenticated","isLoading","error","useQuery","data","supabase","currentPlan","_a","planData","planError","updatePlan","useMutation","planId","cancelSubscription"],"mappings":"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"}