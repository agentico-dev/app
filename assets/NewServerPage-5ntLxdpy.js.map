{"version":3,"file":"NewServerPage-5ntLxdpy.js","sources":["../../src/components/forms/CreateServerForm.tsx","../../src/pages/servers/NewServerPage.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { \n  Form, \n  FormControl, \n  FormDescription, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from '@/components/ui/form';\nimport { useNavigate } from 'react-router';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { CreateServerPayload } from '@/types/organization';\nimport { useAuth } from '@/hooks/useAuth';\nimport { generateSlug } from '@/utils/supabaseHelpers';\n\nexport function CreateServerForm() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const navigate = useNavigate();\n  const { session } = useAuth();\n  \n  const form = useForm<CreateServerPayload>({\n    defaultValues: {\n      name: '',\n      description: '',\n      type: 'Virtual',\n      status: 'Offline',\n    },\n  });\n\n  const onSubmit = async (data: CreateServerPayload) => {\n    if (!session.user) {\n      toast.error(\"You need to be logged in to create a server\");\n      return;\n    }\n    \n    setIsSubmitting(true);\n    \n    try {\n      // Get organization from localStorage\n      const organizationId = localStorage.getItem('selectedOrganizationId');\n      \n      if (!organizationId) {\n        toast.error(\"Please select an organization from the top navigation bar\");\n        setIsSubmitting(false);\n        return;\n      }\n      \n      // Generate slug from name\n      const slug = generateSlug(data.name);\n      \n      const { data: newServer, error } = await supabase\n        .from('servers')\n        .insert({\n          name: data.name,\n          slug: slug,\n          description: data.description,\n          type: data.type,\n          status: data.status,\n          user_id: session.user.id,\n          organization_id: organizationId,\n        })\n        .select()\n        .single();\n      \n      if (error) throw error;\n      \n      toast.success('Server created successfully');\n      \n      // Navigate directly to the new server using the slug\n      if (newServer) {\n        navigate(`/servers/${newServer.slug}`);\n      } else {\n        navigate('/servers');\n      }\n    } catch (error: any) {\n      console.error('Error creating server:', error);\n      toast.error(`Failed to create server: ${error.message || 'Unknown error'}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Server Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter server name\" {...field} />\n              </FormControl>\n              <FormDescription>\n                The name of your server.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Describe your server\" \n                  className=\"min-h-[120px]\" \n                  {...field} \n                />\n              </FormControl>\n              <FormDescription>\n                A brief description of what this server is for.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"type\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Server Type</FormLabel>\n              <FormControl>\n                <Input placeholder=\"e.g., Virtual, Physical, Cloud\" {...field} />\n              </FormControl>\n              <FormDescription>\n                The type of server.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <div className=\"flex justify-end space-x-4\">\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={() => navigate('/servers')}\n          >\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting ? 'Creating...' : 'Create Server'}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nexport default CreateServerForm;\n","\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowLeft } from 'lucide-react';\nimport { Link } from 'react-router';\nimport CreateServerForm from '@/components/forms/CreateServerForm';\n\nexport default function NewServerPage() {\n  return (\n    <div className=\"container py-6 space-y-6\">\n      <Button variant=\"ghost\" asChild>\n        <Link to=\"/servers\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back to Servers\n        </Link>\n      </Button>\n      \n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Create New Server</h1>\n        <p className=\"text-muted-foreground\">\n          Set up a new server for your AI applications\n        </p>\n      </div>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Server Details</CardTitle>\n          <CardDescription>\n            Fill in the details to create your new server\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <CreateServerForm />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"names":["CreateServerForm","isSubmitting","setIsSubmitting","useState","navigate","useNavigate","session","useAuth","form","useForm","onSubmit","data","toast","organizationId","slug","generateSlug","newServer","error","supabase","jsx","Form","jsxs","FormField","field","FormItem","FormLabel","FormControl","Input","FormDescription","FormMessage","Textarea","Button","NewServerPage","Link","ArrowLeft","Card","CardHeader","CardTitle","CardDescription","CardContent"],"mappings":"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"}